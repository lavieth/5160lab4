
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001f40  00001fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000467  00800126  00800126  00001ffa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eca  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000136b  00000000  00000000  00006142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a1b  00000000  00000000  000074ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00008ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abb  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002802  00000000  00000000  00009f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000c739  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 01 	jmp	0x232	; 0x232 <__ctors_end>
       4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
       8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
       c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      10:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      14:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      1c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      20:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      30:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      38:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      3c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      44:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      48:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      4c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      50:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      54:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      58:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      5c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      60:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      64:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      68:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      6c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      70:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      74:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      78:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      7c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      80:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      84:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      88:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      8c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      90:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      94:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      98:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      9c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      a0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      a4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      a8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      ac:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      b0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      b4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      b8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      bc:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      c0:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      c4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
      c8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>

000000cc <LSI_Prompt>:
      cc:	45 6e 74 65 72 20 62 6c 6f 63 6b 20 23 3a 20 00     Enter block #: .

000000dc <Prnt_bytes_prnt>:
      dc:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      ec:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
      fc:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
     10c:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

0000011c <SD_Card_BlSz>:
     11c:	42 6c 6f 63 6b 20 73 69 7a 65 20 73 65 74 20 74     Block size set t
     12c:	6f 20 35 31 32 20 62 79 74 65 73 0a 0d 00           o 512 bytes...

0000013a <SD_Card_HC>:
     13a:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     14a:	72 64 20 64 65 74 65 63 74 65 64 2e 0a 0d 00        rd detected....

00000159 <SD_Card_SC>:
     159:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     169:	79 20 43 61 72 64 20 64 65 74 65 63 74 65 64 2e     y Card detected.
     179:	0a 0d 00                                            ...

0000017c <SD_Card_V2>:
     17c:	56 65 72 73 69 6f 6e 20 32 20 53 44 20 43 61 72     Version 2 SD Car
     18c:	64 20 64 65 74 65 63 74 65 64 2e 0a 0d 00           d detected....

0000019a <SD_Card_V1>:
     19a:	56 65 72 73 69 6f 6e 20 31 20 53 44 20 43 61 72     Version 1 SD Car
     1aa:	64 20 64 65 74 65 63 74 65 64 2e 0a 0d 00           d detected....

000001b8 <SD_Card_Resp>:
     1b8:	52 65 73 70 6f 6e 73 65 20 3d 20 00                 Response = .

000001c4 <SD_Card_ACMD41>:
     1c4:	41 43 4d 44 34 31 20 73 65 6e 74 20 2e 2e 2e 20     ACMD41 sent ... 
	...

000001d5 <SD_Card_CMD58>:
     1d5:	43 4d 44 35 38 20 73 65 6e 74 20 2e 2e 2e 20 00     CMD58 sent ... .

000001e5 <SD_Card_CMD16>:
     1e5:	43 4d 44 31 36 20 73 65 6e 74 20 2e 2e 2e 20 00     CMD16 sent ... .

000001f5 <SD_Card_CMD8>:
     1f5:	43 4d 44 38 20 73 65 6e 74 20 2e 2e 2e 20 00        CMD8 sent ... .

00000204 <SD_Card_CMD0>:
     204:	43 4d 44 30 20 73 65 6e 74 20 2e 2e 2e 20 00        CMD0 sent ... .

00000213 <SD_Card_Intro>:
     213:	53 44 20 43 61 72 64 20 49 6e 69 74 69 61 6c 69     SD Card Initiali
     223:	7a 61 74 69 6f 6e 20 2e 2e 2e 20 0a 0d 00 00        zation ... ....

00000232 <__ctors_end>:
     232:	11 24       	eor	r1, r1
     234:	1f be       	out	0x3f, r1	; 63
     236:	cf ef       	ldi	r28, 0xFF	; 255
     238:	d8 e0       	ldi	r29, 0x08	; 8
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	cd bf       	out	0x3d, r28	; 61

0000023e <__do_copy_data>:
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	a0 e0       	ldi	r26, 0x00	; 0
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	e0 e4       	ldi	r30, 0x40	; 64
     246:	ff e1       	ldi	r31, 0x1F	; 31
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x10>
     24a:	05 90       	lpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a6 32       	cpi	r26, 0x26	; 38
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0xc>

00000254 <__do_clear_bss>:
     254:	25 e0       	ldi	r18, 0x05	; 5
     256:	a6 e2       	ldi	r26, 0x26	; 38
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	ad 38       	cpi	r26, 0x8D	; 141
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
     264:	0e 94 97 04 	call	0x92e	; 0x92e <main>
     268:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <_exit>

0000026c <__bad_interrupt>:
     26c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000270 <Output_Init>:
#include "Control_Outputs.h"

void Output_Init(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	*(port_addr+1)|=(pin_mask);    // Set DDRx to make port pin an output
     270:	fc 01       	movw	r30, r24
     272:	21 81       	ldd	r18, Z+1	; 0x01
     274:	62 2b       	or	r22, r18
     276:	61 83       	std	Z+1, r22	; 0x01
     278:	08 95       	ret

0000027a <Output_Set>:


void Output_Set(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		*(port_addr+2)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
     27a:	fc 01       	movw	r30, r24
     27c:	22 81       	ldd	r18, Z+2	; 0x02
     27e:	62 2b       	or	r22, r18
     280:	62 83       	std	Z+2, r22	; 0x02
     282:	08 95       	ret

00000284 <Output_Clear>:
}

void Output_Clear(uint8_t volatile * port_addr, uint8_t pin_mask)
{
     284:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		*(port_addr+2)&=~(pin_mask);    // Clear PORTx pin to value of '0'
     286:	92 81       	ldd	r25, Z+2	; 0x02
     288:	60 95       	com	r22
     28a:	69 23       	and	r22, r25
     28c:	62 83       	std	Z+2, r22	; 0x02
     28e:	08 95       	ret

00000290 <Mount_Drive>:
   return return_clus;
}


uint8_t Mount_Drive(uint8_t * array_name)
{
     290:	3f 92       	push	r3
     292:	4f 92       	push	r4
     294:	5f 92       	push	r5
     296:	6f 92       	push	r6
     298:	7f 92       	push	r7
     29a:	8f 92       	push	r8
     29c:	9f 92       	push	r9
     29e:	af 92       	push	r10
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	60 97       	sbiw	r28, 0x10	; 16
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	9e 83       	std	Y+6, r25	; 0x06
     2c4:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t error_flag = no_errors;
	Read_Sector((uint32_t)(8192), 512, array_name);
     2c6:	9c 01       	movw	r18, r24
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	52 e0       	ldi	r21, 0x02	; 2
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e2       	ldi	r23, 0x20	; 32
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 a4 05 	call	0xb48	; 0xb48 <Read_Sector>
	
	//BPB has been read
	if((read_value_8(0, array_name) == 0xEB) || (read_value_8(0, array_name) == 0xE9))
     2d8:	6d 81       	ldd	r22, Y+5	; 0x05
     2da:	7e 81       	ldd	r23, Y+6	; 0x06
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     2e4:	8b 3e       	cpi	r24, 0xEB	; 235
     2e6:	49 f0       	breq	.+18     	; 0x2fa <Mount_Drive+0x6a>
     2e8:	6d 81       	ldd	r22, Y+5	; 0x05
     2ea:	7e 81       	ldd	r23, Y+6	; 0x06
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     2f4:	89 3e       	cpi	r24, 0xE9	; 233
     2f6:	09 f0       	breq	.+2      	; 0x2fa <Mount_Drive+0x6a>
     2f8:	2e c1       	rjmp	.+604    	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	{
	print_memory(&UART1, 512, array_name);
     2fa:	4d 81       	ldd	r20, Y+5	; 0x05
     2fc:	5e 81       	ldd	r21, Y+6	; 0x06
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	72 e0       	ldi	r23, 0x02	; 2
     302:	88 ec       	ldi	r24, 0xC8	; 200
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 77 05 	call	0xaee	; 0xaee <print_memory>
		//If FAT32, RootEntCount and RootDirSecs will both be 0
		uint16_t RootEntCount = read_value_16(0x11, array_name);
     30a:	6d 81       	ldd	r22, Y+5	; 0x05
     30c:	7e 81       	ldd	r23, Y+6	; 0x06
     30e:	81 e1       	ldi	r24, 0x11	; 17
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     316:	8c 01       	movw	r16, r24
		BytesPerSec_g = read_value_16(0x0B, array_name);
     318:	6d 81       	ldd	r22, Y+5	; 0x05
     31a:	7e 81       	ldd	r23, Y+6	; 0x06
     31c:	8b e0       	ldi	r24, 0x0B	; 11
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     324:	bc 01       	movw	r22, r24
     326:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <BytesPerSec_g+0x1>
     32a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <BytesPerSec_g>
		RootDirSecs_g = (((RootEntCount * 32) + (BytesPerSec_g - 1)) / BytesPerSec_g);
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	00 0f       	add	r16, r16
     332:	11 1f       	adc	r17, r17
     334:	02 95       	swap	r16
     336:	12 95       	swap	r17
     338:	10 7f       	andi	r17, 0xF0	; 240
     33a:	10 27       	eor	r17, r16
     33c:	00 7f       	andi	r16, 0xF0	; 240
     33e:	10 27       	eor	r17, r16
     340:	80 0f       	add	r24, r16
     342:	91 1f       	adc	r25, r17
     344:	0e 94 28 0c 	call	0x1850	; 0x1850 <__udivmodhi4>
     348:	cb 01       	movw	r24, r22
     34a:	a0 e0       	ldi	r26, 0x00	; 0
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RootDirSecs_g>
     352:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <RootDirSecs_g+0x1>
     356:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <RootDirSecs_g+0x2>
     35a:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <RootDirSecs_g+0x3>
		
		uint16_t FATSz16 = read_value_16(0x16, array_name);
     35e:	6d 81       	ldd	r22, Y+5	; 0x05
     360:	7e 81       	ldd	r23, Y+6	; 0x06
     362:	86 e1       	ldi	r24, 0x16	; 22
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     36a:	5c 01       	movw	r10, r24
		uint32_t FATSz32 = read_value_32(0x24, array_name);
     36c:	6d 81       	ldd	r22, Y+5	; 0x05
     36e:	7e 81       	ldd	r23, Y+6	; 0x06
     370:	84 e2       	ldi	r24, 0x24	; 36
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     378:	6b 01       	movw	r12, r22
     37a:	7c 01       	movw	r14, r24
		uint16_t TotSec16 = read_value_16(0x13, array_name);
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	83 e1       	ldi	r24, 0x13	; 19
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     388:	8c 01       	movw	r16, r24
		uint32_t TotSec32 = read_value_32(0x20, array_name);
     38a:	6d 81       	ldd	r22, Y+5	; 0x05
     38c:	7e 81       	ldd	r23, Y+6	; 0x06
     38e:	80 e2       	ldi	r24, 0x20	; 32
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     396:	69 83       	std	Y+1, r22	; 0x01
     398:	7a 83       	std	Y+2, r23	; 0x02
     39a:	8b 83       	std	Y+3, r24	; 0x03
     39c:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t ResvdSecCount = read_value_16(0x0E, array_name);
     39e:	6d 81       	ldd	r22, Y+5	; 0x05
     3a0:	7e 81       	ldd	r23, Y+6	; 0x06
     3a2:	8e e0       	ldi	r24, 0x0E	; 14
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     3aa:	4c 01       	movw	r8, r24
		uint8_t NumFATs = read_value_8(0x10, array_name);
     3ac:	6d 81       	ldd	r22, Y+5	; 0x05
     3ae:	7e 81       	ldd	r23, Y+6	; 0x06
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     3b8:	38 2e       	mov	r3, r24
		uint32_t HiddenSec = read_value_32(0x1C, array_name);
     3ba:	6d 81       	ldd	r22, Y+5	; 0x05
     3bc:	7e 81       	ldd	r23, Y+6	; 0x06
     3be:	8c e1       	ldi	r24, 0x1C	; 28
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     3c6:	2b 01       	movw	r4, r22
     3c8:	3c 01       	movw	r6, r24
		uint32_t RootClus = read_value_32(0x2C, array_name);
     3ca:	6d 81       	ldd	r22, Y+5	; 0x05
     3cc:	7e 81       	ldd	r23, Y+6	; 0x06
     3ce:	8c e2       	ldi	r24, 0x2C	; 44
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     3d6:	6d 87       	std	Y+13, r22	; 0x0d
     3d8:	7e 87       	std	Y+14, r23	; 0x0e
     3da:	8f 87       	std	Y+15, r24	; 0x0f
     3dc:	98 8b       	std	Y+16, r25	; 0x10
		SecPerClus_g = read_value_8(0x0D, array_name);
     3de:	6d 81       	ldd	r22, Y+5	; 0x05
     3e0:	7e 81       	ldd	r23, Y+6	; 0x06
     3e2:	8d e0       	ldi	r24, 0x0D	; 13
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     3ea:	e8 2f       	mov	r30, r24
     3ec:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <SecPerClus_g>
		uint32_t DataSec;
		uint32_t CountofClusters;
		uint8_t FATOffset;
		uint8_t N = 0;
		
		if(FATSz16 != 0)
     3f0:	a1 14       	cp	r10, r1
     3f2:	b1 04       	cpc	r11, r1
     3f4:	19 f0       	breq	.+6      	; 0x3fc <Mount_Drive+0x16c>
		FATSz = FATSz16;
     3f6:	65 01       	movw	r12, r10
     3f8:	e1 2c       	mov	r14, r1
     3fa:	f1 2c       	mov	r15, r1
		
		else
		FATSz = FATSz32;

		if(TotSec16 != 0)
     3fc:	01 15       	cp	r16, r1
     3fe:	11 05       	cpc	r17, r1
     400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		TotSec = TotSec16;
     402:	98 01       	movw	r18, r16
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	29 83       	std	Y+1, r18	; 0x01
     40a:	3a 83       	std	Y+2, r19	; 0x02
     40c:	4b 83       	std	Y+3, r20	; 0x03
     40e:	5c 83       	std	Y+4, r21	; 0x04
		
		else
		TotSec = TotSec32;
		
		DataSec = TotSec - (ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g);
     410:	a1 2c       	mov	r10, r1
     412:	b1 2c       	mov	r11, r1
     414:	a3 2d       	mov	r26, r3
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	a7 01       	movw	r20, r14
     41a:	96 01       	movw	r18, r12
     41c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__muluhisi3>
     420:	9b 01       	movw	r18, r22
     422:	ac 01       	movw	r20, r24
     424:	28 0d       	add	r18, r8
     426:	39 1d       	adc	r19, r9
     428:	4a 1d       	adc	r20, r10
     42a:	5b 1d       	adc	r21, r11
     42c:	2d 83       	std	Y+5, r18	; 0x05
     42e:	3e 83       	std	Y+6, r19	; 0x06
     430:	4f 83       	std	Y+7, r20	; 0x07
     432:	58 87       	std	Y+8, r21	; 0x08
     434:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RootDirSecs_g>
     438:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <RootDirSecs_g+0x1>
     43c:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <RootDirSecs_g+0x2>
     440:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <RootDirSecs_g+0x3>
     444:	69 01       	movw	r12, r18
     446:	7a 01       	movw	r14, r20
     448:	c8 0e       	add	r12, r24
     44a:	d9 1e       	adc	r13, r25
     44c:	ea 1e       	adc	r14, r26
     44e:	fb 1e       	adc	r15, r27
		
		CountofClusters = DataSec / SecPerClus_g;
     450:	8e 2f       	mov	r24, r30
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	a0 e0       	ldi	r26, 0x00	; 0
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	89 87       	std	Y+9, r24	; 0x09
     45a:	9a 87       	std	Y+10, r25	; 0x0a
     45c:	ab 87       	std	Y+11, r26	; 0x0b
     45e:	bc 87       	std	Y+12, r27	; 0x0c
		
		if(CountofClusters < 65525)
     460:	69 81       	ldd	r22, Y+1	; 0x01
     462:	7a 81       	ldd	r23, Y+2	; 0x02
     464:	8b 81       	ldd	r24, Y+3	; 0x03
     466:	9c 81       	ldd	r25, Y+4	; 0x04
     468:	6c 19       	sub	r22, r12
     46a:	7d 09       	sbc	r23, r13
     46c:	8e 09       	sbc	r24, r14
     46e:	9f 09       	sbc	r25, r15
     470:	29 85       	ldd	r18, Y+9	; 0x09
     472:	3a 85       	ldd	r19, Y+10	; 0x0a
     474:	4b 85       	ldd	r20, Y+11	; 0x0b
     476:	5c 85       	ldd	r21, Y+12	; 0x0c
     478:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmodsi4>
     47c:	25 3f       	cpi	r18, 0xF5	; 245
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	41 05       	cpc	r20, r1
     482:	51 05       	cpc	r21, r1
     484:	78 f5       	brcc	.+94     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		FATtype_g = FAT16;
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <FATtype_g>
		FATOffset = N * 2;
		
		else if (FATtype_g == FAT32)
		FATOffset = N * 4;
		
		StartofFAT_g = ResvdSecCount + HiddenSec;
     48c:	84 0c       	add	r8, r4
     48e:	95 1c       	adc	r9, r5
     490:	a6 1c       	adc	r10, r6
     492:	b7 1c       	adc	r11, r7
     494:	80 92 79 01 	sts	0x0179, r8	; 0x800179 <StartofFAT_g>
     498:	90 92 7a 01 	sts	0x017A, r9	; 0x80017a <StartofFAT_g+0x1>
     49c:	a0 92 7b 01 	sts	0x017B, r10	; 0x80017b <StartofFAT_g+0x2>
     4a0:	b0 92 7c 01 	sts	0x017C, r11	; 0x80017c <StartofFAT_g+0x3>
		
		FirstDataSec_g = ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g + HiddenSec;
     4a4:	d3 01       	movw	r26, r6
     4a6:	c2 01       	movw	r24, r4
     4a8:	8c 0d       	add	r24, r12
     4aa:	9d 1d       	adc	r25, r13
     4ac:	ae 1d       	adc	r26, r14
     4ae:	bf 1d       	adc	r27, r15
     4b0:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <FirstDataSec_g>
     4b4:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <FirstDataSec_g+0x1>
     4b8:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <FirstDataSec_g+0x2>
     4bc:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <FirstDataSec_g+0x3>
		
		if(FATtype_g == FAT16)
		FirstRootDirSec_g = ResvdSecCount + (NumFATs * FATSz) + HiddenSec;
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	9e 81       	ldd	r25, Y+6	; 0x06
     4c4:	af 81       	ldd	r26, Y+7	; 0x07
     4c6:	b8 85       	ldd	r27, Y+8	; 0x08
     4c8:	84 0d       	add	r24, r4
     4ca:	95 1d       	adc	r25, r5
     4cc:	a6 1d       	adc	r26, r6
     4ce:	b7 1d       	adc	r27, r7
     4d0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <FirstRootDirSec_g>
     4d4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <FirstRootDirSec_g+0x1>
     4d8:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <FirstRootDirSec_g+0x2>
     4dc:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <FirstRootDirSec_g+0x3>
}


uint8_t Mount_Drive(uint8_t * array_name)
{
	uint8_t error_flag = no_errors;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	80 c1       	rjmp	.+768    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
		
		if(CountofClusters < 65525)
		FATtype_g = FAT16;
		
		else
		FATtype_g = FAT32;
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <FATtype_g>
		FATOffset = N * 2;
		
		else if (FATtype_g == FAT32)
		FATOffset = N * 4;
		
		StartofFAT_g = ResvdSecCount + HiddenSec;
     4ea:	84 0c       	add	r8, r4
     4ec:	95 1c       	adc	r9, r5
     4ee:	a6 1c       	adc	r10, r6
     4f0:	b7 1c       	adc	r11, r7
     4f2:	80 92 79 01 	sts	0x0179, r8	; 0x800179 <StartofFAT_g>
     4f6:	90 92 7a 01 	sts	0x017A, r9	; 0x80017a <StartofFAT_g+0x1>
     4fa:	a0 92 7b 01 	sts	0x017B, r10	; 0x80017b <StartofFAT_g+0x2>
     4fe:	b0 92 7c 01 	sts	0x017C, r11	; 0x80017c <StartofFAT_g+0x3>
		
		FirstDataSec_g = ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g + HiddenSec;
     502:	53 01       	movw	r10, r6
     504:	42 01       	movw	r8, r4
     506:	8c 0c       	add	r8, r12
     508:	9d 1c       	adc	r9, r13
     50a:	ae 1c       	adc	r10, r14
     50c:	bf 1c       	adc	r11, r15
     50e:	80 92 7f 01 	sts	0x017F, r8	; 0x80017f <FirstDataSec_g>
     512:	90 92 80 01 	sts	0x0180, r9	; 0x800180 <FirstDataSec_g+0x1>
     516:	a0 92 81 01 	sts	0x0181, r10	; 0x800181 <FirstDataSec_g+0x2>
     51a:	b0 92 82 01 	sts	0x0182, r11	; 0x800182 <FirstDataSec_g+0x3>
		
		if(FATtype_g == FAT16)
		FirstRootDirSec_g = ResvdSecCount + (NumFATs * FATSz) + HiddenSec;
		
		else if (FATtype_g == FAT32)
		FirstRootDirSec_g = ((RootClus -2) * SecPerClus_g) + FirstDataSec_g;
     51e:	2d 85       	ldd	r18, Y+13	; 0x0d
     520:	3e 85       	ldd	r19, Y+14	; 0x0e
     522:	4f 85       	ldd	r20, Y+15	; 0x0f
     524:	58 89       	ldd	r21, Y+16	; 0x10
     526:	22 50       	subi	r18, 0x02	; 2
     528:	31 09       	sbc	r19, r1
     52a:	41 09       	sbc	r20, r1
     52c:	51 09       	sbc	r21, r1
     52e:	69 85       	ldd	r22, Y+9	; 0x09
     530:	7a 85       	ldd	r23, Y+10	; 0x0a
     532:	8b 85       	ldd	r24, Y+11	; 0x0b
     534:	9c 85       	ldd	r25, Y+12	; 0x0c
     536:	0e 94 18 0c 	call	0x1830	; 0x1830 <__mulsi3>
     53a:	86 0e       	add	r8, r22
     53c:	97 1e       	adc	r9, r23
     53e:	a8 1e       	adc	r10, r24
     540:	b9 1e       	adc	r11, r25
     542:	80 92 88 01 	sts	0x0188, r8	; 0x800188 <FirstRootDirSec_g>
     546:	90 92 89 01 	sts	0x0189, r9	; 0x800189 <FirstRootDirSec_g+0x1>
     54a:	a0 92 8a 01 	sts	0x018A, r10	; 0x80018a <FirstRootDirSec_g+0x2>
     54e:	b0 92 8b 01 	sts	0x018B, r11	; 0x80018b <FirstRootDirSec_g+0x3>
}


uint8_t Mount_Drive(uint8_t * array_name)
{
	uint8_t error_flag = no_errors;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	47 c1       	rjmp	.+654    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
		FirstRootDirSec_g = ((RootClus -2) * SecPerClus_g) + FirstDataSec_g;
	}
	
	else 
	{
		Read_Sector(read_value_32(0x01C6, array_name), 512, array_name);
     556:	6d 81       	ldd	r22, Y+5	; 0x05
     558:	7e 81       	ldd	r23, Y+6	; 0x06
     55a:	86 ec       	ldi	r24, 0xC6	; 198
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     562:	2d 81       	ldd	r18, Y+5	; 0x05
     564:	3e 81       	ldd	r19, Y+6	; 0x06
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	52 e0       	ldi	r21, 0x02	; 2
     56a:	0e 94 a4 05 	call	0xb48	; 0xb48 <Read_Sector>
		
		if(read_value_8(0, array_name) == 0xEB || read_value_8(0, array_name) == 0xE9)
     56e:	6d 81       	ldd	r22, Y+5	; 0x05
     570:	7e 81       	ldd	r23, Y+6	; 0x06
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     57a:	8b 3e       	cpi	r24, 0xEB	; 235
     57c:	49 f0       	breq	.+18     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     57e:	6d 81       	ldd	r22, Y+5	; 0x05
     580:	7e 81       	ldd	r23, Y+6	; 0x06
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     58a:	89 3e       	cpi	r24, 0xE9	; 233
     58c:	09 f0       	breq	.+2      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     58e:	29 c1       	rjmp	.+594    	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
		{
				//If FAT32, RootEntCount and RootDirSecs will both be 0
				uint16_t RootEntCount = read_value_16(0x11, array_name);
     590:	6d 81       	ldd	r22, Y+5	; 0x05
     592:	7e 81       	ldd	r23, Y+6	; 0x06
     594:	81 e1       	ldi	r24, 0x11	; 17
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     59c:	8c 01       	movw	r16, r24
				BytesPerSec_g = read_value_16(0x0B, array_name);
     59e:	6d 81       	ldd	r22, Y+5	; 0x05
     5a0:	7e 81       	ldd	r23, Y+6	; 0x06
     5a2:	8b e0       	ldi	r24, 0x0B	; 11
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     5aa:	bc 01       	movw	r22, r24
     5ac:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <BytesPerSec_g+0x1>
     5b0:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <BytesPerSec_g>
				RootDirSecs_g = (((RootEntCount * 32) + (BytesPerSec_g - 1)) / BytesPerSec_g);
     5b4:	c8 01       	movw	r24, r16
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	82 95       	swap	r24
     5bc:	92 95       	swap	r25
     5be:	90 7f       	andi	r25, 0xF0	; 240
     5c0:	98 27       	eor	r25, r24
     5c2:	80 7f       	andi	r24, 0xF0	; 240
     5c4:	98 27       	eor	r25, r24
     5c6:	9b 01       	movw	r18, r22
     5c8:	21 50       	subi	r18, 0x01	; 1
     5ca:	31 09       	sbc	r19, r1
     5cc:	82 0f       	add	r24, r18
     5ce:	93 1f       	adc	r25, r19
     5d0:	0e 94 28 0c 	call	0x1850	; 0x1850 <__udivmodhi4>
     5d4:	cb 01       	movw	r24, r22
     5d6:	a0 e0       	ldi	r26, 0x00	; 0
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <RootDirSecs_g>
     5de:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <RootDirSecs_g+0x1>
     5e2:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <RootDirSecs_g+0x2>
     5e6:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <RootDirSecs_g+0x3>
				
				uint16_t FATSz16 = read_value_16(0x16, array_name);
     5ea:	6d 81       	ldd	r22, Y+5	; 0x05
     5ec:	7e 81       	ldd	r23, Y+6	; 0x06
     5ee:	86 e1       	ldi	r24, 0x16	; 22
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     5f6:	5c 01       	movw	r10, r24
				uint32_t FATSz32 = read_value_32(0x24, array_name);
     5f8:	6d 81       	ldd	r22, Y+5	; 0x05
     5fa:	7e 81       	ldd	r23, Y+6	; 0x06
     5fc:	84 e2       	ldi	r24, 0x24	; 36
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     604:	6b 01       	movw	r12, r22
     606:	7c 01       	movw	r14, r24
				uint16_t TotSec16 = read_value_16(0x13, array_name);
     608:	6d 81       	ldd	r22, Y+5	; 0x05
     60a:	7e 81       	ldd	r23, Y+6	; 0x06
     60c:	83 e1       	ldi	r24, 0x13	; 19
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     614:	8c 01       	movw	r16, r24
				uint32_t TotSec32 = read_value_32(0x20, array_name);
     616:	6d 81       	ldd	r22, Y+5	; 0x05
     618:	7e 81       	ldd	r23, Y+6	; 0x06
     61a:	80 e2       	ldi	r24, 0x20	; 32
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     622:	69 83       	std	Y+1, r22	; 0x01
     624:	7a 83       	std	Y+2, r23	; 0x02
     626:	8b 83       	std	Y+3, r24	; 0x03
     628:	9c 83       	std	Y+4, r25	; 0x04
				uint16_t ResvdSecCount = read_value_16(0x0E, array_name);
     62a:	6d 81       	ldd	r22, Y+5	; 0x05
     62c:	7e 81       	ldd	r23, Y+6	; 0x06
     62e:	8e e0       	ldi	r24, 0x0E	; 14
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <read_value_16>
     636:	4c 01       	movw	r8, r24
				uint8_t NumFATs = read_value_8(0x10, array_name);
     638:	6d 81       	ldd	r22, Y+5	; 0x05
     63a:	7e 81       	ldd	r23, Y+6	; 0x06
     63c:	80 e1       	ldi	r24, 0x10	; 16
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     644:	38 2e       	mov	r3, r24
				uint32_t HiddenSec = read_value_32(0x1C, array_name);
     646:	6d 81       	ldd	r22, Y+5	; 0x05
     648:	7e 81       	ldd	r23, Y+6	; 0x06
     64a:	8c e1       	ldi	r24, 0x1C	; 28
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     652:	2b 01       	movw	r4, r22
     654:	3c 01       	movw	r6, r24
				uint32_t RootClus = read_value_32(0x2C, array_name);
     656:	6d 81       	ldd	r22, Y+5	; 0x05
     658:	7e 81       	ldd	r23, Y+6	; 0x06
     65a:	8c e2       	ldi	r24, 0x2C	; 44
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <read_value_32>
     662:	6d 87       	std	Y+13, r22	; 0x0d
     664:	7e 87       	std	Y+14, r23	; 0x0e
     666:	8f 87       	std	Y+15, r24	; 0x0f
     668:	98 8b       	std	Y+16, r25	; 0x10
				SecPerClus_g = read_value_8(0x0D, array_name);
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8d e0       	ldi	r24, 0x0D	; 13
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 dd 05 	call	0xbba	; 0xbba <read_value_8>
     676:	e8 2f       	mov	r30, r24
     678:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <SecPerClus_g>
				uint32_t DataSec;
				uint32_t CountofClusters;
				uint8_t FATOffset;
				uint8_t N = 0;
				
				if(FATSz16 != 0)
     67c:	a1 14       	cp	r10, r1
     67e:	b1 04       	cpc	r11, r1
     680:	19 f0       	breq	.+6      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
				FATSz = FATSz16;
     682:	65 01       	movw	r12, r10
     684:	e1 2c       	mov	r14, r1
     686:	f1 2c       	mov	r15, r1
				
				else
				FATSz = FATSz32;

				if(TotSec16 != 0)
     688:	01 15       	cp	r16, r1
     68a:	11 05       	cpc	r17, r1
     68c:	39 f0       	breq	.+14     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
				TotSec = TotSec16;
     68e:	98 01       	movw	r18, r16
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	29 83       	std	Y+1, r18	; 0x01
     696:	3a 83       	std	Y+2, r19	; 0x02
     698:	4b 83       	std	Y+3, r20	; 0x03
     69a:	5c 83       	std	Y+4, r21	; 0x04
				
				else
				TotSec = TotSec32;
				
				DataSec = TotSec - (ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g);
     69c:	a1 2c       	mov	r10, r1
     69e:	b1 2c       	mov	r11, r1
     6a0:	a3 2d       	mov	r26, r3
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	a7 01       	movw	r20, r14
     6a6:	96 01       	movw	r18, r12
     6a8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__muluhisi3>
     6ac:	9b 01       	movw	r18, r22
     6ae:	ac 01       	movw	r20, r24
     6b0:	28 0d       	add	r18, r8
     6b2:	39 1d       	adc	r19, r9
     6b4:	4a 1d       	adc	r20, r10
     6b6:	5b 1d       	adc	r21, r11
     6b8:	2d 83       	std	Y+5, r18	; 0x05
     6ba:	3e 83       	std	Y+6, r19	; 0x06
     6bc:	4f 83       	std	Y+7, r20	; 0x07
     6be:	58 87       	std	Y+8, r21	; 0x08
     6c0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <RootDirSecs_g>
     6c4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <RootDirSecs_g+0x1>
     6c8:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <RootDirSecs_g+0x2>
     6cc:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <RootDirSecs_g+0x3>
     6d0:	69 01       	movw	r12, r18
     6d2:	7a 01       	movw	r14, r20
     6d4:	c8 0e       	add	r12, r24
     6d6:	d9 1e       	adc	r13, r25
     6d8:	ea 1e       	adc	r14, r26
     6da:	fb 1e       	adc	r15, r27
				
				CountofClusters = DataSec / SecPerClus_g;
     6dc:	8e 2f       	mov	r24, r30
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	89 87       	std	Y+9, r24	; 0x09
     6e6:	9a 87       	std	Y+10, r25	; 0x0a
     6e8:	ab 87       	std	Y+11, r26	; 0x0b
     6ea:	bc 87       	std	Y+12, r27	; 0x0c
				
				if(CountofClusters < 65525)
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	7a 81       	ldd	r23, Y+2	; 0x02
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	6c 19       	sub	r22, r12
     6f6:	7d 09       	sbc	r23, r13
     6f8:	8e 09       	sbc	r24, r14
     6fa:	9f 09       	sbc	r25, r15
     6fc:	29 85       	ldd	r18, Y+9	; 0x09
     6fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     700:	4b 85       	ldd	r20, Y+11	; 0x0b
     702:	5c 85       	ldd	r21, Y+12	; 0x0c
     704:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmodsi4>
     708:	25 3f       	cpi	r18, 0xF5	; 245
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	41 05       	cpc	r20, r1
     70e:	51 05       	cpc	r21, r1
     710:	78 f5       	brcc	.+94     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
				FATtype_g = FAT16;
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <FATtype_g>
				FATOffset = N * 2;
				
				else if (FATtype_g == FAT32)
				FATOffset = N * 4;
				
				StartofFAT_g = ResvdSecCount + HiddenSec;
     718:	84 0c       	add	r8, r4
     71a:	95 1c       	adc	r9, r5
     71c:	a6 1c       	adc	r10, r6
     71e:	b7 1c       	adc	r11, r7
     720:	80 92 79 01 	sts	0x0179, r8	; 0x800179 <StartofFAT_g>
     724:	90 92 7a 01 	sts	0x017A, r9	; 0x80017a <StartofFAT_g+0x1>
     728:	a0 92 7b 01 	sts	0x017B, r10	; 0x80017b <StartofFAT_g+0x2>
     72c:	b0 92 7c 01 	sts	0x017C, r11	; 0x80017c <StartofFAT_g+0x3>
				
				FirstDataSec_g = ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g + HiddenSec;
     730:	d3 01       	movw	r26, r6
     732:	c2 01       	movw	r24, r4
     734:	8c 0d       	add	r24, r12
     736:	9d 1d       	adc	r25, r13
     738:	ae 1d       	adc	r26, r14
     73a:	bf 1d       	adc	r27, r15
     73c:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <FirstDataSec_g>
     740:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <FirstDataSec_g+0x1>
     744:	a0 93 81 01 	sts	0x0181, r26	; 0x800181 <FirstDataSec_g+0x2>
     748:	b0 93 82 01 	sts	0x0182, r27	; 0x800182 <FirstDataSec_g+0x3>
				
				if(FATtype_g == FAT16)
				FirstRootDirSec_g = ResvdSecCount + (NumFATs * FATSz) + HiddenSec;
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	af 81       	ldd	r26, Y+7	; 0x07
     752:	b8 85       	ldd	r27, Y+8	; 0x08
     754:	84 0d       	add	r24, r4
     756:	95 1d       	adc	r25, r5
     758:	a6 1d       	adc	r26, r6
     75a:	b7 1d       	adc	r27, r7
     75c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <FirstRootDirSec_g>
     760:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <FirstRootDirSec_g+0x1>
     764:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <FirstRootDirSec_g+0x2>
     768:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <FirstRootDirSec_g+0x3>
}


uint8_t Mount_Drive(uint8_t * array_name)
{
	uint8_t error_flag = no_errors;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	3a c0       	rjmp	.+116    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
				
				if(CountofClusters < 65525)
				FATtype_g = FAT16;
				
				else
				FATtype_g = FAT32;
     770:	84 e0       	ldi	r24, 0x04	; 4
     772:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <FATtype_g>
				FATOffset = N * 2;
				
				else if (FATtype_g == FAT32)
				FATOffset = N * 4;
				
				StartofFAT_g = ResvdSecCount + HiddenSec;
     776:	84 0c       	add	r8, r4
     778:	95 1c       	adc	r9, r5
     77a:	a6 1c       	adc	r10, r6
     77c:	b7 1c       	adc	r11, r7
     77e:	80 92 79 01 	sts	0x0179, r8	; 0x800179 <StartofFAT_g>
     782:	90 92 7a 01 	sts	0x017A, r9	; 0x80017a <StartofFAT_g+0x1>
     786:	a0 92 7b 01 	sts	0x017B, r10	; 0x80017b <StartofFAT_g+0x2>
     78a:	b0 92 7c 01 	sts	0x017C, r11	; 0x80017c <StartofFAT_g+0x3>
				
				FirstDataSec_g = ResvdSecCount + (NumFATs * FATSz) + RootDirSecs_g + HiddenSec;
     78e:	53 01       	movw	r10, r6
     790:	42 01       	movw	r8, r4
     792:	8c 0c       	add	r8, r12
     794:	9d 1c       	adc	r9, r13
     796:	ae 1c       	adc	r10, r14
     798:	bf 1c       	adc	r11, r15
     79a:	80 92 7f 01 	sts	0x017F, r8	; 0x80017f <FirstDataSec_g>
     79e:	90 92 80 01 	sts	0x0180, r9	; 0x800180 <FirstDataSec_g+0x1>
     7a2:	a0 92 81 01 	sts	0x0181, r10	; 0x800181 <FirstDataSec_g+0x2>
     7a6:	b0 92 82 01 	sts	0x0182, r11	; 0x800182 <FirstDataSec_g+0x3>
				
				if(FATtype_g == FAT16)
				FirstRootDirSec_g = ResvdSecCount + (NumFATs * FATSz) + HiddenSec;
				
				else if (FATtype_g == FAT32)
				FirstRootDirSec_g = ((RootClus -2) * SecPerClus_g) + FirstDataSec_g;
     7aa:	2d 85       	ldd	r18, Y+13	; 0x0d
     7ac:	3e 85       	ldd	r19, Y+14	; 0x0e
     7ae:	4f 85       	ldd	r20, Y+15	; 0x0f
     7b0:	58 89       	ldd	r21, Y+16	; 0x10
     7b2:	22 50       	subi	r18, 0x02	; 2
     7b4:	31 09       	sbc	r19, r1
     7b6:	41 09       	sbc	r20, r1
     7b8:	51 09       	sbc	r21, r1
     7ba:	69 85       	ldd	r22, Y+9	; 0x09
     7bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     7be:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7c2:	0e 94 18 0c 	call	0x1830	; 0x1830 <__mulsi3>
     7c6:	86 0e       	add	r8, r22
     7c8:	97 1e       	adc	r9, r23
     7ca:	a8 1e       	adc	r10, r24
     7cc:	b9 1e       	adc	r11, r25
     7ce:	80 92 88 01 	sts	0x0188, r8	; 0x800188 <FirstRootDirSec_g>
     7d2:	90 92 89 01 	sts	0x0189, r9	; 0x800189 <FirstRootDirSec_g+0x1>
     7d6:	a0 92 8a 01 	sts	0x018A, r10	; 0x80018a <FirstRootDirSec_g+0x2>
     7da:	b0 92 8b 01 	sts	0x018B, r11	; 0x80018b <FirstRootDirSec_g+0x3>
}


uint8_t Mount_Drive(uint8_t * array_name)
{
	uint8_t error_flag = no_errors;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
		}
		
		//couldn't find BPB
		else
		{
			error_flag = BPB_not_found;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return error_flag;	
}
     7e4:	60 96       	adiw	r28, 0x10	; 16
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	bf 90       	pop	r11
     802:	af 90       	pop	r10
     804:	9f 90       	pop	r9
     806:	8f 90       	pop	r8
     808:	7f 90       	pop	r7
     80a:	6f 90       	pop	r6
     80c:	5f 90       	pop	r5
     80e:	4f 90       	pop	r4
     810:	3f 90       	pop	r3
     812:	08 95       	ret

00000814 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(uint8_t volatile *UART_addr)
{
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	2b 97       	sbiw	r28, 0x0b	; 11
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	7c 01       	movw	r14, r24
     83a:	fe 01       	movw	r30, r28
     83c:	31 96       	adiw	r30, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	0c 96       	adiw	r24, 0x0c	; 12
   uint8_t index,input,input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
      {
        input_values[index]=0;
     842:	11 92       	st	Z+, r1

uint32_t long_serial_input(uint8_t volatile *UART_addr)
{
   uint8_t index,input,input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     844:	e8 17       	cp	r30, r24
     846:	f9 07       	cpc	r31, r25
     848:	e1 f7       	brne	.-8      	; 0x842 <long_serial_input+0x2e>
     84a:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_Receive(UART_addr);
     84c:	c7 01       	movw	r24, r14
     84e:	0e 94 b5 0b 	call	0x176a	; 0x176a <UART_Receive>
     852:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
     854:	80 ed       	ldi	r24, 0xD0	; 208
     856:	81 0f       	add	r24, r17
     858:	8a 30       	cpi	r24, 0x0A	; 10
     85a:	68 f4       	brcc	.+26     	; 0x876 <long_serial_input+0x62>
         {
           UART_Transmit(UART_addr,input);    // echo valid inputs only
     85c:	61 2f       	mov	r22, r17
     85e:	c7 01       	movw	r24, r14
     860:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
		   input_values[index]=input;
     864:	e1 e0       	ldi	r30, 0x01	; 1
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ec 0f       	add	r30, r28
     86a:	fd 1f       	adc	r31, r29
     86c:	e0 0f       	add	r30, r16
     86e:	f1 1d       	adc	r31, r1
     870:	10 83       	st	Z, r17
           index++;
     872:	0f 5f       	subi	r16, 0xFF	; 255
     874:	45 c0       	rjmp	.+138    	; 0x900 <__stack+0x1>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
     876:	18 30       	cpi	r17, 0x08	; 8
     878:	11 f0       	breq	.+4      	; 0x87e <long_serial_input+0x6a>
     87a:	1f 37       	cpi	r17, 0x7F	; 127
     87c:	a9 f4       	brne	.+42     	; 0x8a8 <long_serial_input+0x94>
         {
           index--;
     87e:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
     880:	e1 e0       	ldi	r30, 0x01	; 1
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ec 0f       	add	r30, r28
     886:	fd 1f       	adc	r31, r29
     888:	e0 0f       	add	r30, r16
     88a:	f1 1d       	adc	r31, r1
     88c:	10 82       	st	Z, r1
		   UART_Transmit(UART_addr,BS);
     88e:	68 e0       	ldi	r22, 0x08	; 8
     890:	c7 01       	movw	r24, r14
     892:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
           UART_Transmit(UART_addr,space);
     896:	60 e2       	ldi	r22, 0x20	; 32
     898:	c7 01       	movw	r24, r14
     89a:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
           UART_Transmit(UART_addr,BS);
     89e:	68 e0       	ldi	r22, 0x08	; 8
     8a0:	c7 01       	movw	r24, r14
     8a2:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
     8a6:	2c c0       	rjmp	.+88     	; 0x900 <__stack+0x1>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
     8a8:	1d 30       	cpi	r17, 0x0D	; 13
     8aa:	21 f0       	breq	.+8      	; 0x8b4 <long_serial_input+0xa0>
     8ac:	1a 30       	cpi	r17, 0x0A	; 10
     8ae:	11 f0       	breq	.+4      	; 0x8b4 <long_serial_input+0xa0>
     8b0:	1e 32       	cpi	r17, 0x2E	; 46
     8b2:	31 f5       	brne	.+76     	; 0x900 <__stack+0x1>
         {
            output_value=atol(input_values);
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <atol>
     8bc:	4b 01       	movw	r8, r22
     8be:	5c 01       	movw	r10, r24
            UART_Transmit(UART_addr,CR);
     8c0:	6d e0       	ldi	r22, 0x0D	; 13
     8c2:	c7 01       	movw	r24, r14
     8c4:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
			UART_Transmit(UART_addr,LF);
     8c8:	6a e0       	ldi	r22, 0x0A	; 10
     8ca:	c7 01       	movw	r24, r14
     8cc:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
         }
         if(index==10)
     8d0:	0a 30       	cpi	r16, 0x0A	; 10
     8d2:	71 f4       	brne	.+28     	; 0x8f0 <long_serial_input+0xdc>
         {
            output_value=atol(input_values);
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <atol>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
            UART_Transmit(UART_addr,CR);
     8e0:	6d e0       	ldi	r22, 0x0D	; 13
     8e2:	c7 01       	movw	r24, r14
     8e4:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
			UART_Transmit(UART_addr,LF);
     8e8:	6a e0       	ldi	r22, 0x0A	; 10
     8ea:	c7 01       	movw	r24, r14
     8ec:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
         }
      }while(output_value==0xffffffff);
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	88 16       	cp	r8, r24
     8f4:	98 06       	cpc	r9, r24
     8f6:	a8 06       	cpc	r10, r24
     8f8:	b8 06       	cpc	r11, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <long_serial_input+0xea>
     8fc:	a7 cf       	rjmp	.-178    	; 0x84c <long_serial_input+0x38>
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
         {
            output_value=atol(input_values);
            UART_Transmit(UART_addr,CR);
			UART_Transmit(UART_addr,LF);
         }
         if(index==10)
     900:	0a 30       	cpi	r16, 0x0A	; 10
     902:	09 f0       	breq	.+2      	; 0x906 <__stack+0x7>
     904:	a3 cf       	rjmp	.-186    	; 0x84c <long_serial_input+0x38>
     906:	e6 cf       	rjmp	.-52     	; 0x8d4 <long_serial_input+0xc0>
			UART_Transmit(UART_addr,LF);
         }
      }while(output_value==0xffffffff);

return output_value;
}
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	2b 96       	adiw	r28, 0x0b	; 11
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	9f 90       	pop	r9
     92a:	8f 90       	pop	r8
     92c:	08 95       	ret

0000092e <main>:
    /* Replace with your application code */
	int8_t *prnt_bffr;
	uint32_t temp32;

	
	prnt_bffr=Export_print_buffer();
     92e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Export_print_buffer>
     932:	ec 01       	movw	r28, r24
	Output_Set(&PA,(LED3|OLED_C_D));
     934:	60 ec       	ldi	r22, 0xC0	; 192
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	Output_Init(&PA,(LED3|OLED_C_D));
     93e:	60 ec       	ldi	r22, 0xC0	; 192
     940:	80 e2       	ldi	r24, 0x20	; 32
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	Output_Set(&PB,(SD_CS|LED1|OLED_CS));
     948:	69 e1       	ldi	r22, 0x19	; 25
     94a:	83 e2       	ldi	r24, 0x23	; 35
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	Output_Init(&PB,(SD_CS|LED1|OLED_CS));
     952:	69 e1       	ldi	r22, 0x19	; 25
     954:	83 e2       	ldi	r24, 0x23	; 35
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	Output_Set(&PC,(USER_LED));
     95c:	60 e8       	ldi	r22, 0x80	; 128
     95e:	86 e2       	ldi	r24, 0x26	; 38
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	Output_Init(&PC,(USER_LED));
     966:	60 e8       	ldi	r22, 0x80	; 128
     968:	86 e2       	ldi	r24, 0x26	; 38
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	Output_Set(&PE,(LED2));
     970:	60 e1       	ldi	r22, 0x10	; 16
     972:	8c e2       	ldi	r24, 0x2C	; 44
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	Output_Init(&PE,(LED2));
     97a:	60 e1       	ldi	r22, 0x10	; 16
     97c:	8c e2       	ldi	r24, 0x2C	; 44
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	
	SPI_Master_Init(&SPI0,400000);
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	5a e1       	ldi	r21, 0x1A	; 26
     988:	66 e0       	ldi	r22, 0x06	; 6
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	8c e4       	ldi	r24, 0x4C	; 76
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <SPI_Master_Init>
	//OLED_Init();
	UART_init(&UART1,9600);
     994:	60 e8       	ldi	r22, 0x80	; 128
     996:	75 e2       	ldi	r23, 0x25	; 37
     998:	88 ec       	ldi	r24, 0xC8	; 200
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 87 0b 	call	0x170e	; 0x170e <UART_init>
	SD_Card_Init();
     9a0:	0e 94 d4 06 	call	0xda8	; 0xda8 <SD_Card_Init>
	SPI_Master_Init(&SPI0,2000000);
     9a4:	40 e8       	ldi	r20, 0x80	; 128
     9a6:	54 e8       	ldi	r21, 0x84	; 132
     9a8:	6e e1       	ldi	r22, 0x1E	; 30
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	8c e4       	ldi	r24, 0x4C	; 76
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <SPI_Master_Init>
    while (1) 
    {
		 Copy_String_to_Buffer(LSI_Prompt,0,prnt_bffr);
     9b4:	ae 01       	movw	r20, r28
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	8c ec       	ldi	r24, 0xCC	; 204
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		 UART_Transmit_String(&UART1,0,prnt_bffr);
     9c0:	ae 01       	movw	r20, r28
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	88 ec       	ldi	r24, 0xC8	; 200
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
		 temp32=long_serial_input(&UART1);
     9cc:	88 ec       	ldi	r24, 0xC8	; 200
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 0a 04 	call	0x814	; 0x814 <long_serial_input>
		 Output_Clear(&PB,LED1);
     9d4:	68 e0       	ldi	r22, 0x08	; 8
     9d6:	83 e2       	ldi	r24, 0x23	; 35
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
		 /*Output_Clear(&PB,SD_CS);  // Clear nCS = 0
		 Send_Command(17,temp32);
		 Read_Block(512,buffer1);
		 Output_Set(&PB,LED1);
		 Output_Set(&PB,SD_CS);  // Set nCS = 1*/
		Mount_Drive(buffer1);
     9de:	8d e8       	ldi	r24, 0x8D	; 141
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 48 01 	call	0x290	; 0x290 <Mount_Drive>
     9e6:	e6 cf       	rjmp	.-52     	; 0x9b4 <main+0x86>

000009e8 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t volatile * UART_addr, uint8_t * array_in, uint16_t offset)
{
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	7c 01       	movw	r14, r24
     a02:	eb 01       	movw	r28, r22
     a04:	8a 01       	movw	r16, r20
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
     a06:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Export_print_buffer>
     a0a:	c8 2e       	mov	r12, r24
     a0c:	d9 2e       	mov	r13, r25
   
   input = array_in+offset;
     a0e:	c0 0f       	add	r28, r16
     a10:	d1 1f       	adc	r29, r17
   sprintf(prnt_bffr, "%p ",input);
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	df 92       	push	r13
     a20:	cf 92       	push	r12
     a22:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     a26:	4c 2d       	mov	r20, r12
     a28:	5d 2d       	mov	r21, r13
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	c7 01       	movw	r24, r14
     a2e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
     a32:	1f 93       	push	r17
     a34:	0f 93       	push	r16
     a36:	84 e0       	ldi	r24, 0x04	; 4
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	df 92       	push	r13
     a40:	cf 92       	push	r12
     a42:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     a46:	4c 2d       	mov	r20, r12
     a48:	5d 2d       	mov	r21, r13
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	c7 01       	movw	r24, r14
     a4e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     a52:	8e 01       	movw	r16, r28
     a54:	5e 01       	movw	r10, r28
     a56:	e0 e1       	ldi	r30, 0x10	; 16
     a58:	ae 0e       	add	r10, r30
     a5a:	b1 1c       	adc	r11, r1
     a5c:	8d b7       	in	r24, 0x3d	; 61
     a5e:	9e b7       	in	r25, 0x3e	; 62
     a60:	0c 96       	adiw	r24, 0x0c	; 12
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	9e bf       	out	0x3e, r25	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	8d bf       	out	0x3d, r24	; 61
   for (index=0;index<16;index++)
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     a6c:	0f 2e       	mov	r0, r31
     a6e:	fe e0       	ldi	r31, 0x0E	; 14
     a70:	8f 2e       	mov	r8, r31
     a72:	f1 e0       	ldi	r31, 0x01	; 1
     a74:	9f 2e       	mov	r9, r31
     a76:	f0 2d       	mov	r31, r0
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
   {
      dat=*(input+index);
     a78:	89 91       	ld	r24, Y+
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     a7a:	1f 92       	push	r1
     a7c:	8f 93       	push	r24
     a7e:	9f 92       	push	r9
     a80:	8f 92       	push	r8
     a82:	df 92       	push	r13
     a84:	cf 92       	push	r12
     a86:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
     a8a:	4c 2d       	mov	r20, r12
     a8c:	5d 2d       	mov	r21, r13
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	c7 01       	movw	r24, r14
     a92:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	ac 16       	cp	r10, r28
     aa4:	bd 06       	cpc	r11, r29
     aa6:	41 f7       	brne	.-48     	; 0xa78 <print_16bytes+0x90>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
     aa8:	f8 01       	movw	r30, r16
     aaa:	61 91       	ld	r22, Z+
     aac:	8f 01       	movw	r16, r30
      if (dat<32 || dat>127) dat=46;
     aae:	80 ee       	ldi	r24, 0xE0	; 224
     ab0:	86 0f       	add	r24, r22
     ab2:	80 36       	cpi	r24, 0x60	; 96
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <print_16bytes+0xd0>
     ab6:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
     ab8:	c7 01       	movw	r24, r14
     aba:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
     abe:	0a 15       	cp	r16, r10
     ac0:	1b 05       	cpc	r17, r11
     ac2:	91 f7       	brne	.-28     	; 0xaa8 <print_16bytes+0xc0>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
     ac4:	6d e0       	ldi	r22, 0x0D	; 13
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
   UART_Transmit(UART_addr,LF);
     acc:	6a e0       	ldi	r22, 0x0A	; 10
     ace:	c7 01       	movw	r24, r14
     ad0:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	08 95       	ret

00000aee <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t volatile * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	8c 01       	movw	r16, r24
     b00:	6b 01       	movw	r12, r22
     b02:	7a 01       	movw	r14, r20
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
     b04:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Export_print_buffer>
     b08:	ec 01       	movw	r28, r24
   
   input = 0;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
     b0a:	ac 01       	movw	r20, r24
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	8c ed       	ldi	r24, 0xDC	; 220
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
     b16:	ae 01       	movw	r20, r28
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	c8 01       	movw	r24, r16
     b1c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = 0;
     b20:	c0 e0       	ldi	r28, 0x00	; 0
     b22:	d0 e0       	ldi	r29, 0x00	; 0
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,array_in,input);
     b24:	ae 01       	movw	r20, r28
     b26:	b7 01       	movw	r22, r14
     b28:	c8 01       	movw	r24, r16
     b2a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <print_16bytes>
      input+=16;
     b2e:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
     b30:	cc 15       	cp	r28, r12
     b32:	dd 05       	cpc	r29, r13
     b34:	b8 f3       	brcs	.-18     	; 0xb24 <print_memory+0x36>
}
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <Read_Sector>:
#include "Read_Sector.h"
#include "SDCard.h"
#include "Control_Outputs.h"

uint8_t Read_Sector(uint32_t sector_number, uint16_t sector_size, uint8_t * array_for_data)
{
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
     b5e:	ea 01       	movw	r28, r20
     b60:	89 01       	movw	r16, r18
  uint8_t SDtype, error_flag = no_errors;
  //if HC=0 no change to sector number
  //SC=9 multiplies sector num by 512 to convert to byte addr.
  SDtype=Return_SD_Card_Type();
     b62:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Return_SD_Card_Type>
     b66:	b8 2e       	mov	r11, r24
  Output_Clear(&PB, SD_CS);
     b68:	60 e1       	ldi	r22, 0x10	; 16
     b6a:	83 e2       	ldi	r24, 0x23	; 35
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
  error_flag=Send_Command(17, (sector_number<<SDtype));
     b72:	b7 01       	movw	r22, r14
     b74:	a6 01       	movw	r20, r12
     b76:	04 c0       	rjmp	.+8      	; 0xb80 <Read_Sector+0x38>
     b78:	44 0f       	add	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	66 1f       	adc	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	ba 94       	dec	r11
     b82:	d2 f7       	brpl	.-12     	; 0xb78 <Read_Sector+0x30>
     b84:	81 e1       	ldi	r24, 0x11	; 17
     b86:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
     b8a:	f8 2e       	mov	r15, r24
  if(error_flag==no_errors)
     b8c:	81 11       	cpse	r24, r1
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <Read_Sector+0x52>
      error_flag=Read_Block(sector_size,array_for_data);
     b90:	b8 01       	movw	r22, r16
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 79 06 	call	0xcf2	; 0xcf2 <Read_Block>
     b98:	f8 2e       	mov	r15, r24
  Output_Set(&PB,SD_CS);
     b9a:	60 e1       	ldi	r22, 0x10	; 16
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
  
  /*if(error_flag!=no_errors)
      error_flag=disk_error; 
*/
  return error_flag;
}
     ba4:	8f 2d       	mov	r24, r15
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	bf 90       	pop	r11
     bb8:	08 95       	ret

00000bba <read_value_8>:
//do we need the switch for Big to little endian function? part b) of 3 seems to ask for it


uint8_t read_value_8 (uint16_t offset, uint8_t * array_name)
{
  uint8_t temp8 = *(array_name+offset);
     bba:	86 0f       	add	r24, r22
     bbc:	97 1f       	adc	r25, r23
  return temp8;
}
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	08 95       	ret

00000bc4 <read_value_16>:
uint16_t read_value_16 (uint16_t offset, uint8_t * array_name)
{
  uint16_t temp16 = *(array_name+offset);
     bc4:	86 0f       	add	r24, r22
     bc6:	97 1f       	adc	r25, r23

  return temp16;
     bc8:	fc 01       	movw	r30, r24
     bca:	80 81       	ld	r24, Z
}
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	08 95       	ret

00000bd0 <read_value_32>:


uint32_t read_value_32 (uint16_t offset, uint8_t * array_name)
{
  uint32_t temp32 = *(array_name+offset);
     bd0:	86 0f       	add	r24, r22
     bd2:	97 1f       	adc	r25, r23
  return temp32;
     bd4:	fc 01       	movw	r30, r24
     bd6:	60 81       	ld	r22, Z
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0

}
     bde:	08 95       	ret

00000be0 <Send_Command>:
RETURNS: error flag
CAUTION: Must be followed by a read to capture SD card response
         nCS0 must be set/cleared outside of this routine 
************************************************************************/
uint8_t Send_Command(uint8_t cmnd, uint32_t argum)
{
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	cf 93       	push	r28
 uint8_t SPI_send, return_val, SPI_return;

 return_val=no_errors;
 if(cmnd<64)
     bea:	80 34       	cpi	r24, 0x40	; 64
     bec:	a0 f5       	brcc	.+104    	; 0xc56 <Send_Command+0x76>
     bee:	6a 01       	movw	r12, r20
     bf0:	7b 01       	movw	r14, r22
     bf2:	c8 2f       	mov	r28, r24
 {
   SPI_send=cmnd | 0x40;
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     bf4:	68 2f       	mov	r22, r24
     bf6:	60 64       	ori	r22, 0x40	; 64
     bf8:	8c e4       	ldi	r24, 0x4C	; 76
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   //MSB of argument
   SPI_send=argum>>24;   // MSB
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     c00:	6f 2d       	mov	r22, r15
     c02:	77 27       	eor	r23, r23
     c04:	88 27       	eor	r24, r24
     c06:	99 27       	eor	r25, r25
     c08:	8c e4       	ldi	r24, 0x4C	; 76
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   // Byte 2 of argument
   argum=argum & 0x00ffffff;
   SPI_send=argum>>16;  // BYTE2
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     c10:	6e 2d       	mov	r22, r14
     c12:	8c e4       	ldi	r24, 0x4C	; 76
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   // Byte 1 of argument
   argum=argum & 0x0000ffff;
     c1a:	ee 24       	eor	r14, r14
     c1c:	ff 24       	eor	r15, r15
   SPI_send=argum>>8;   // BYTE1
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     c1e:	99 27       	eor	r25, r25
     c20:	8f 2d       	mov	r24, r15
     c22:	7e 2d       	mov	r23, r14
     c24:	6d 2d       	mov	r22, r13
     c26:	8c e4       	ldi	r24, 0x4C	; 76
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   // LSB of argument
   SPI_send=argum & 0x000000ff;  // LSB
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     c2e:	6c 2d       	mov	r22, r12
     c30:	8c e4       	ldi	r24, 0x4C	; 76
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   // CRC7 and end bit
   if (cmnd == 0)
     c38:	cc 23       	and	r28, r28
     c3a:	21 f0       	breq	.+8      	; 0xc44 <Send_Command+0x64>
   {
      SPI_send=0x95;  // CRC7 and end bit for CMD0
   }
   else if (cmnd == 8)
     c3c:	c8 30       	cpi	r28, 0x08	; 8
     c3e:	21 f0       	breq	.+8      	; 0xc48 <Send_Command+0x68>
   {
      SPI_send=0x87;   // CRC7 and end bit for CMD8
   }
   else
   {
      SPI_send=0x01;  // end bit only for other commands
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <Send_Command+0x6a>
   SPI_send=argum & 0x000000ff;  // LSB
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
   // CRC7 and end bit
   if (cmnd == 0)
   {
      SPI_send=0x95;  // CRC7 and end bit for CMD0
     c44:	65 e9       	ldi	r22, 0x95	; 149
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <Send_Command+0x6a>
   }
   else if (cmnd == 8)
   {
      SPI_send=0x87;   // CRC7 and end bit for CMD8
     c48:	67 e8       	ldi	r22, 0x87	; 135
   }
   else
   {
      SPI_send=0x01;  // end bit only for other commands
   }
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
     c4a:	8c e4       	ldi	r24, 0x4C	; 76
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
************************************************************************/
uint8_t Send_Command(uint8_t cmnd, uint32_t argum)
{
 uint8_t SPI_send, return_val, SPI_return;

 return_val=no_errors;
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <Send_Command+0x78>
   }
   SPI_return=SPI_Transfer(&SD_PORT,SPI_send);
 }
 else
 {
   return_val=illegal_cmnd;
     c56:	82 e8       	ldi	r24, 0x82	; 130
 }
 return return_val;  
}
     c58:	cf 91       	pop	r28
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	08 95       	ret

00000c64 <Receive_Response>:
         *valout=address of array of bytes read
CAUTION: Used to capture SD card response
         nCS0 must be set/cleared outside of this routine 
************************************************************************/
uint8_t Receive_Response(uint8_t num_bytes, uint8_t * valout)
{
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	d8 2f       	mov	r29, r24
     c72:	8b 01       	movw	r16, r22
   uint8_t index,return_val, SPI_return;

   index=0;
     c74:	c0 e0       	ldi	r28, 0x00	; 0
   return_val=no_errors;
   do
   {
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	8c e4       	ldi	r24, 0x4C	; 76
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
      index++;
     c80:	cf 5f       	subi	r28, 0xFF	; 255
   }while((SPI_return==0xFF)&&(index!=0));
     c82:	8f 3f       	cpi	r24, 0xFF	; 255
     c84:	21 f4       	brne	.+8      	; 0xc8e <Receive_Response+0x2a>
     c86:	c1 11       	cpse	r28, r1
     c88:	f6 cf       	rjmp	.-20     	; 0xc76 <Receive_Response+0x12>
   if(index==0)
   {
      return_val=timeout_error;
     c8a:	c1 e8       	ldi	r28, 0x81	; 129
     c8c:	25 c0       	rjmp	.+74     	; 0xcd8 <Receive_Response+0x74>
   do
   {
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
      index++;
   }while((SPI_return==0xFF)&&(index!=0));
   if(index==0)
     c8e:	cc 23       	and	r28, r28
     c90:	f1 f0       	breq	.+60     	; 0xcce <Receive_Response+0x6a>
   {
      return_val=timeout_error;
   }
   else
   {
     *valout=SPI_return;
     c92:	f8 01       	movw	r30, r16
     c94:	80 83       	st	Z, r24
     if((SPI_return==0x00)||(SPI_return==0x01))
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	e0 f4       	brcc	.+56     	; 0xcd2 <Receive_Response+0x6e>
     {
       if(num_bytes>1)
     c9a:	d2 30       	cpi	r29, 0x02	; 2
     c9c:	e0 f0       	brcs	.+56     	; 0xcd6 <Receive_Response+0x72>
     c9e:	78 01       	movw	r14, r16
     ca0:	ff ef       	ldi	r31, 0xFF	; 255
     ca2:	ef 1a       	sub	r14, r31
     ca4:	ff 0a       	sbc	r15, r31
     ca6:	8e ef       	ldi	r24, 0xFE	; 254
     ca8:	8d 0f       	add	r24, r29
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 96       	adiw	r24, 0x02	; 2
     cae:	e8 01       	movw	r28, r16
     cb0:	c8 0f       	add	r28, r24
     cb2:	d9 1f       	adc	r29, r25
       {
         for(index=1;index<num_bytes;index++)
         {
            SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     cb4:	6f ef       	ldi	r22, 0xFF	; 255
     cb6:	8c e4       	ldi	r24, 0x4C	; 76
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
            *(valout+index)=SPI_return;
     cbe:	f7 01       	movw	r30, r14
     cc0:	81 93       	st	Z+, r24
     cc2:	7f 01       	movw	r14, r30
     *valout=SPI_return;
     if((SPI_return==0x00)||(SPI_return==0x01))
     {
       if(num_bytes>1)
       {
         for(index=1;index<num_bytes;index++)
     cc4:	ec 17       	cp	r30, r28
     cc6:	fd 07       	cpc	r31, r29
     cc8:	a9 f7       	brne	.-22     	; 0xcb4 <Receive_Response+0x50>
uint8_t Receive_Response(uint8_t num_bytes, uint8_t * valout)
{
   uint8_t index,return_val, SPI_return;

   index=0;
   return_val=no_errors;
     cca:	c0 e0       	ldi	r28, 0x00	; 0
     ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <Receive_Response+0x74>
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
      index++;
   }while((SPI_return==0xFF)&&(index!=0));
   if(index==0)
   {
      return_val=timeout_error;
     cce:	c1 e8       	ldi	r28, 0x81	; 129
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <Receive_Response+0x74>
         }
       }
     }
     else
     {
        return_val=response_error;
     cd2:	c3 e8       	ldi	r28, 0x83	; 131
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <Receive_Response+0x74>
uint8_t Receive_Response(uint8_t num_bytes, uint8_t * valout)
{
   uint8_t index,return_val, SPI_return;

   index=0;
   return_val=no_errors;
     cd6:	c0 e0       	ldi	r28, 0x00	; 0
     else
     {
        return_val=response_error;
     }
   }
   SPI_return=SPI_Transfer(&SD_PORT,0xFF);    // send 8 more clock cycles to complete read
     cd8:	6f ef       	ldi	r22, 0xFF	; 255
     cda:	8c e4       	ldi	r24, 0x4C	; 76
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   return return_val;
}
     ce2:	8c 2f       	mov	r24, r28
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	08 95       	ret

00000cf2 <Read_Block>:
         block of data stored in array_out[]
CAUTION: Used to capture SD card response
         nCS0 must be set/cleared outside of this routine 
************************************************************************/
uint8_t Read_Block(uint16_t num_bytes, uint8_t * array_out)
{
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	8c 01       	movw	r16, r24
     d00:	7b 01       	movw	r14, r22
   uint8_t return_val,SPI_return;
   uint16_t index;
   index=0;
     d02:	c0 e0       	ldi	r28, 0x00	; 0
     d04:	d0 e0       	ldi	r29, 0x00	; 0
   return_val=no_errors;
   do
   {
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     d06:	6f ef       	ldi	r22, 0xFF	; 255
     d08:	8c e4       	ldi	r24, 0x4C	; 76
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
      index++;
     d10:	21 96       	adiw	r28, 0x01	; 1
   }while(((SPI_return&0x80)==0x80)&&(index!=0));
     d12:	88 23       	and	r24, r24
     d14:	24 f4       	brge	.+8      	; 0xd1e <Read_Block+0x2c>
     d16:	20 97       	sbiw	r28, 0x00	; 0
     d18:	b1 f7       	brne	.-20     	; 0xd06 <Read_Block+0x14>
   if(index==0)
   {
      return_val=timeout_error;
     d1a:	c1 e8       	ldi	r28, 0x81	; 129
     d1c:	38 c0       	rjmp	.+112    	; 0xd8e <Read_Block+0x9c>
   do
   {
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
      index++;
   }while(((SPI_return&0x80)==0x80)&&(index!=0));
   if(index==0)
     d1e:	cd 2b       	or	r28, r29
     d20:	79 f1       	breq	.+94     	; 0xd80 <Read_Block+0x8e>
   {
      return_val=timeout_error;
   }
   else
   {
     if (SPI_return==0x00)
     d22:	81 11       	cpse	r24, r1
     d24:	2f c0       	rjmp	.+94     	; 0xd84 <Read_Block+0x92>
     d26:	c0 e0       	ldi	r28, 0x00	; 0
     d28:	d0 e0       	ldi	r29, 0x00	; 0
     {
        index=0;
	    do
        { 
           SPI_return=SPI_Transfer(&SD_PORT,0xFF); 
     d2a:	6f ef       	ldi	r22, 0xFF	; 255
     d2c:	8c e4       	ldi	r24, 0x4C	; 76
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
           index++;
     d34:	21 96       	adiw	r28, 0x01	; 1
        }while((SPI_return==0xFF)&&(index!=0));          // wait for data token response  
     d36:	8f 3f       	cpi	r24, 0xFF	; 255
     d38:	21 f4       	brne	.+8      	; 0xd42 <Read_Block+0x50>
     d3a:	20 97       	sbiw	r28, 0x00	; 0
     d3c:	b1 f7       	brne	.-20     	; 0xd2a <Read_Block+0x38>
        if(index==0)
        {
          return_val=timeout_error;
     d3e:	c1 e8       	ldi	r28, 0x81	; 129
     d40:	26 c0       	rjmp	.+76     	; 0xd8e <Read_Block+0x9c>
	    do
        { 
           SPI_return=SPI_Transfer(&SD_PORT,0xFF); 
           index++;
        }while((SPI_return==0xFF)&&(index!=0));          // wait for data token response  
        if(index==0)
     d42:	cd 2b       	or	r28, r29
     d44:	09 f1       	breq	.+66     	; 0xd88 <Read_Block+0x96>
        {
          return_val=timeout_error;
        }
        else if(SPI_return==0xFE)
     d46:	8e 3f       	cpi	r24, 0xFE	; 254
     d48:	09 f5       	brne	.+66     	; 0xd8c <Read_Block+0x9a>
        {
          for(index=0;index<num_bytes;index++)
     d4a:	01 15       	cp	r16, r1
     d4c:	11 05       	cpc	r17, r1
     d4e:	61 f0       	breq	.+24     	; 0xd68 <Read_Block+0x76>
     d50:	e7 01       	movw	r28, r14
     d52:	0e 0d       	add	r16, r14
     d54:	1f 1d       	adc	r17, r15
          {
             SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     d56:	6f ef       	ldi	r22, 0xFF	; 255
     d58:	8c e4       	ldi	r24, 0x4C	; 76
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
             *(array_out + index)=SPI_return;
     d60:	89 93       	st	Y+, r24
        {
          return_val=timeout_error;
        }
        else if(SPI_return==0xFE)
        {
          for(index=0;index<num_bytes;index++)
     d62:	c0 17       	cp	r28, r16
     d64:	d1 07       	cpc	r29, r17
     d66:	b9 f7       	brne	.-18     	; 0xd56 <Read_Block+0x64>
          {
             SPI_return=SPI_Transfer(&SD_PORT,0xFF);
             *(array_out + index)=SPI_return;
          }
          SPI_return=SPI_Transfer(&SD_PORT,0xFF);   // discard byte 1 of CRC16
     d68:	6f ef       	ldi	r22, 0xFF	; 255
     d6a:	8c e4       	ldi	r24, 0x4C	; 76
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
		  SPI_return=SPI_Transfer(&SD_PORT,0xFF);   // discard byte 2 of CRC16
     d72:	6f ef       	ldi	r22, 0xFF	; 255
     d74:	8c e4       	ldi	r24, 0x4C	; 76
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
uint8_t Read_Block(uint16_t num_bytes, uint8_t * array_out)
{
   uint8_t return_val,SPI_return;
   uint16_t index;
   index=0;
   return_val=no_errors;
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <Read_Block+0x9c>
      SPI_return=SPI_Transfer(&SD_PORT,0xFF);
      index++;
   }while(((SPI_return&0x80)==0x80)&&(index!=0));
   if(index==0)
   {
      return_val=timeout_error;
     d80:	c1 e8       	ldi	r28, 0x81	; 129
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <Read_Block+0x9c>
	      return_val=data_error;
	    }
     }
     else
     {
        return_val=response_error;
     d84:	c3 e8       	ldi	r28, 0x83	; 131
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <Read_Block+0x9c>
           SPI_return=SPI_Transfer(&SD_PORT,0xFF); 
           index++;
        }while((SPI_return==0xFF)&&(index!=0));          // wait for data token response  
        if(index==0)
        {
          return_val=timeout_error;
     d88:	c1 e8       	ldi	r28, 0x81	; 129
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <Read_Block+0x9c>
          SPI_return=SPI_Transfer(&SD_PORT,0xFF);   // discard byte 1 of CRC16
		  SPI_return=SPI_Transfer(&SD_PORT,0xFF);   // discard byte 2 of CRC16
        }
	    else
	    {
	      return_val=data_error;
     d8c:	c4 e8       	ldi	r28, 0x84	; 132
     else
     {
        return_val=response_error;
     }
   }
   SPI_return=SPI_Transfer(&SD_PORT,0xFF);   // send 8 more clock cycles to complete read
     d8e:	6f ef       	ldi	r22, 0xFF	; 255
     d90:	8c e4       	ldi	r24, 0x4C	; 76
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
   return return_val;
}
     d98:	8c 2f       	mov	r24, r28
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	08 95       	ret

00000da8 <SD_Card_Init>:
DESC:    Sends the commands needed to initialize the SD card 
RETURNS: error flag
CAUTION:  
************************************************************************/
uint8_t SD_Card_Init(void)
{
     da8:	4f 92       	push	r4
     daa:	5f 92       	push	r5
     dac:	6f 92       	push	r6
     dae:	7f 92       	push	r7
     db0:	9f 92       	push	r9
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	28 97       	sbiw	r28, 0x08	; 8
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
   uint8_t error_status,error_flag,valsout[8],SPI_return;
   uint32_t argument;
   uint16_t i,timeout;
   uint8_t *prnt_buffer;
   
   prnt_buffer=Export_print_buffer();
     dd6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <Export_print_buffer>
     dda:	e8 2e       	mov	r14, r24
     ddc:	99 2e       	mov	r9, r25
   
   error_status=no_errors;
   SD_Card_Type=unknown;
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
   
   	
   
   Copy_String_to_Buffer(SD_Card_Intro,0,prnt_buffer);
     de4:	4e 2d       	mov	r20, r14
     de6:	59 2f       	mov	r21, r25
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	83 e1       	ldi	r24, 0x13	; 19
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
   UART_Transmit_String(&UART1,0,prnt_buffer);
     df2:	4e 2d       	mov	r20, r14
     df4:	59 2d       	mov	r21, r9
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	88 ec       	ldi	r24, 0xC8	; 200
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
   //LCD_Write(COMMAND,set_ddram_addr|line1);
   //sprintf(print_buffer,"SD Card Init");
   //LCD_Print(0,print_buffer);
   
   
   Output_Clear(&PB,(LED1));
     e00:	68 e0       	ldi	r22, 0x08	; 8
     e02:	83 e2       	ldi	r24, 0x23	; 35
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
   Copy_String_to_Buffer(SD_Card_CMD0,0,prnt_buffer);
     e0a:	4e 2d       	mov	r20, r14
     e0c:	59 2d       	mov	r21, r9
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
   UART_Transmit_String(&UART1,0,prnt_buffer);
     e18:	4e 2d       	mov	r20, r14
     e1a:	59 2d       	mov	r21, r9
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	88 ec       	ldi	r24, 0xC8	; 200
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
   timeout=0;
     e26:	c1 2c       	mov	r12, r1
     e28:	d1 2c       	mov	r13, r1
		      error_flag=Receive_Response(1,valsout);
		      Output_Set(&PB,(SD_CS));  // Set nCS = 1
		      Output_Set(&PB,(LED1));  //GREENLED=1;
		      Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
		      UART_Transmit_String(&UART1,0,prnt_buffer);
		      sprintf(prnt_buffer, "%2.2X\n\r",valsout[0]);
     e2a:	0f 2e       	mov	r0, r31
     e2c:	f5 e1       	ldi	r31, 0x15	; 21
     e2e:	af 2e       	mov	r10, r31
     e30:	f1 e0       	ldi	r31, 0x01	; 1
     e32:	bf 2e       	mov	r11, r31
     e34:	f0 2d       	mov	r31, r0
   Copy_String_to_Buffer(SD_Card_CMD0,0,prnt_buffer);
   UART_Transmit_String(&UART1,0,prnt_buffer);
   timeout=0;
   do 
   {
	      Output_Set(&PB,(SD_CS));
     e36:	60 e1       	ldi	r22, 0x10	; 16
     e38:	83 e2       	ldi	r24, 0x23	; 35
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	      Output_Init(&PB,(SD_CS));
     e40:	60 e1       	ldi	r22, 0x10	; 16
     e42:	83 e2       	ldi	r24, 0x23	; 35
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
     e4a:	0a e0       	ldi	r16, 0x0A	; 10
     e4c:	10 e0       	ldi	r17, 0x00	; 0
		  
		  for(i=0;i<10;i++)
		  {
			  SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     e4e:	6f ef       	ldi	r22, 0xFF	; 255
     e50:	8c e4       	ldi	r24, 0x4C	; 76
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
     e58:	01 50       	subi	r16, 0x01	; 1
     e5a:	11 09       	sbc	r17, r1
   do 
   {
	      Output_Set(&PB,(SD_CS));
	      Output_Init(&PB,(SD_CS));
		  
		  for(i=0;i<10;i++)
     e5c:	c1 f7       	brne	.-16     	; 0xe4e <SD_Card_Init+0xa6>
		  {
			  SPI_return=SPI_Transfer(&SD_PORT,0xFF);
		  }
		  
		  
		  Output_Clear(&PC,USER_LED);
     e5e:	60 e8       	ldi	r22, 0x80	; 128
     e60:	86 e2       	ldi	r24, 0x26	; 38
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	      Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
     e68:	60 e1       	ldi	r22, 0x10	; 16
     e6a:	83 e2       	ldi	r24, 0x23	; 35
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	      error_flag=Send_Command(CMD0,0);
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	ba 01       	movw	r22, r20
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
     e7e:	f8 2e       	mov	r15, r24
	      if(error_flag==no_errors)
     e80:	81 11       	cpse	r24, r1
     e82:	36 c0       	rjmp	.+108    	; 0xef0 <SD_Card_Init+0x148>
	      {
		      error_flag=Receive_Response(1,valsout);
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
     e90:	f8 2e       	mov	r15, r24
		      Output_Set(&PB,(SD_CS));  // Set nCS = 1
     e92:	60 e1       	ldi	r22, 0x10	; 16
     e94:	83 e2       	ldi	r24, 0x23	; 35
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		      Output_Set(&PB,(LED1));  //GREENLED=1;
     e9c:	68 e0       	ldi	r22, 0x08	; 8
     e9e:	83 e2       	ldi	r24, 0x23	; 35
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		      Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
     ea6:	4e 2d       	mov	r20, r14
     ea8:	59 2d       	mov	r21, r9
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	88 eb       	ldi	r24, 0xB8	; 184
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		      UART_Transmit_String(&UART1,0,prnt_buffer);
     eb4:	4e 2d       	mov	r20, r14
     eb6:	59 2d       	mov	r21, r9
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	88 ec       	ldi	r24, 0xC8	; 200
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
		      sprintf(prnt_buffer, "%2.2X\n\r",valsout[0]);
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	1f 92       	push	r1
     ec6:	8f 93       	push	r24
     ec8:	bf 92       	push	r11
     eca:	af 92       	push	r10
     ecc:	9f 92       	push	r9
     ece:	ef 92       	push	r14
     ed0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
		      UART_Transmit_String(&UART1,0,prnt_buffer);
     ed4:	4e 2d       	mov	r20, r14
     ed6:	59 2d       	mov	r21, r9
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	88 ec       	ldi	r24, 0xC8	; 200
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <SD_Card_Init+0x166>
	      }
	      else
	      {
		      Output_Set(&PB,(SD_CS));  // Set nCS = 1
     ef0:	60 e1       	ldi	r22, 0x10	; 16
     ef2:	83 e2       	ldi	r24, 0x23	; 35
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		      Output_Set(&PB,(LED1));  //GREENLED=1;
     efa:	68 e0       	ldi	r22, 0x08	; 8
     efc:	83 e2       	ldi	r24, 0x23	; 35
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		      Output_Clear(&PA,(LED3)); //REDLED=0;   indicates error has occured.
     f04:	60 e8       	ldi	r22, 0x80	; 128
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	      }
		  if(valsout[0]!=0x01)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	09 f4       	brne	.+2      	; 0xf16 <SD_Card_Init+0x16e>
     f14:	0b c3       	rjmp	.+1558   	; 0x152c <SD_Card_Init+0x784>
		  {
			  //**** If the IN_IDLE_STATE R1 response is not received ***//
			  //**** Attempt to clear any incomplete communications ****//
			  Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
     f16:	60 e1       	ldi	r22, 0x10	; 16
     f18:	83 e2       	ldi	r24, 0x23	; 35
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     f20:	02 e1       	ldi	r16, 0x12	; 18
     f22:	12 e0       	ldi	r17, 0x02	; 2
			  for(i=0;i<530;i++)
			  {
				  SPI_return=SPI_Transfer(&SD_PORT,0xFF);
     f24:	6f ef       	ldi	r22, 0xFF	; 255
     f26:	8c e4       	ldi	r24, 0x4C	; 76
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 80 0b 	call	0x1700	; 0x1700 <SPI_Transfer>
     f2e:	01 50       	subi	r16, 0x01	; 1
     f30:	11 09       	sbc	r17, r1
		  if(valsout[0]!=0x01)
		  {
			  //**** If the IN_IDLE_STATE R1 response is not received ***//
			  //**** Attempt to clear any incomplete communications ****//
			  Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
			  for(i=0;i<530;i++)
     f32:	c1 f7       	brne	.-16     	; 0xf24 <SD_Card_Init+0x17c>
			  {
				  SPI_return=SPI_Transfer(&SD_PORT,0xFF);
			  }
			  Output_Set(&PB,(SD_CS));
     f34:	60 e1       	ldi	r22, 0x10	; 16
     f36:	83 e2       	ldi	r24, 0x23	; 35
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		  }
		  timeout++;
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	c8 1a       	sub	r12, r24
     f42:	d8 0a       	sbc	r13, r24
   } while ((valsout[0]!=0x01)&&(timeout<10));
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	51 f0       	breq	.+20     	; 0xf5e <SD_Card_Init+0x1b6>
     f4a:	ea e0       	ldi	r30, 0x0A	; 10
     f4c:	ce 16       	cp	r12, r30
     f4e:	d1 04       	cpc	r13, r1
     f50:	09 f0       	breq	.+2      	; 0xf54 <SD_Card_Init+0x1ac>
     f52:	71 cf       	rjmp	.-286    	; 0xe36 <SD_Card_Init+0x8e>
   if(timeout==10)
   {
	   error_flag=response_error;
     f54:	0f 2e       	mov	r0, r31
     f56:	f3 e8       	ldi	r31, 0x83	; 131
     f58:	ff 2e       	mov	r15, r31
     f5a:	f0 2d       	mov	r31, r0
     f5c:	11 c3       	rjmp	.+1570   	; 0x1580 <SD_Card_Init+0x7d8>
			  }
			  Output_Set(&PB,(SD_CS));
		  }
		  timeout++;
   } while ((valsout[0]!=0x01)&&(timeout<10));
   if(timeout==10)
     f5e:	fa e0       	ldi	r31, 0x0A	; 10
     f60:	cf 16       	cp	r12, r31
     f62:	d1 04       	cpc	r13, r1
     f64:	09 f0       	breq	.+2      	; 0xf68 <SD_Card_Init+0x1c0>
     f66:	e6 c2       	rjmp	.+1484   	; 0x1534 <SD_Card_Init+0x78c>
     f68:	da c2       	rjmp	.+1460   	; 0x151e <SD_Card_Init+0x776>
   {
     error_status=error_flag;
   }
   if(error_status==no_errors)
   {
     Output_Clear(&PB,(LED1));  //GREENLED=0;
     f6a:	68 e0       	ldi	r22, 0x08	; 8
     f6c:	83 e2       	ldi	r24, 0x23	; 35
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     Copy_String_to_Buffer(SD_Card_CMD8,0,prnt_buffer);
     f74:	4e 2d       	mov	r20, r14
     f76:	59 2d       	mov	r21, r9
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	85 ef       	ldi	r24, 0xF5	; 245
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
     UART_Transmit_String(&UART1,0,prnt_buffer);
     f82:	4e 2d       	mov	r20, r14
     f84:	59 2d       	mov	r21, r9
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
     f90:	60 e1       	ldi	r22, 0x10	; 16
     f92:	83 e2       	ldi	r24, 0x23	; 35
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     error_flag=Send_Command(CMD8,0x000001AA);
     f9a:	4a ea       	ldi	r20, 0xAA	; 170
     f9c:	51 e0       	ldi	r21, 0x01	; 1
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	88 e0       	ldi	r24, 0x08	; 8
     fa4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
     fa8:	f8 2e       	mov	r15, r24
	 if(error_flag==no_errors)
     faa:	81 11       	cpse	r24, r1
     fac:	56 c0       	rjmp	.+172    	; 0x105a <SD_Card_Init+0x2b2>
     {
        error_flag=Receive_Response(5,valsout);
     fae:	be 01       	movw	r22, r28
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	85 e0       	ldi	r24, 0x05	; 5
     fb6:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
     fba:	f8 2e       	mov	r15, r24
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
     fbc:	60 e1       	ldi	r22, 0x10	; 16
     fbe:	83 e2       	ldi	r24, 0x23	; 35
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		Output_Set(&PB,(LED1));  //GREENLED=1;
     fc6:	68 e0       	ldi	r22, 0x08	; 8
     fc8:	83 e2       	ldi	r24, 0x23	; 35
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
     fd0:	4e 2d       	mov	r20, r14
     fd2:	59 2d       	mov	r21, r9
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	88 eb       	ldi	r24, 0xB8	; 184
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
	    UART_Transmit_String(&UART1,0,prnt_buffer);
     fde:	4e 2d       	mov	r20, r14
     fe0:	59 2d       	mov	r21, r9
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	88 ec       	ldi	r24, 0xC8	; 200
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     fec:	8e 01       	movw	r16, r28
     fee:	0f 5f       	subi	r16, 0xFF	; 255
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	5e 01       	movw	r10, r28
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	a8 0e       	add	r10, r24
     ff8:	b1 1c       	adc	r11, r1
        for(i=0;i<5;i++)
		{   
		        sprintf(prnt_buffer, "%2.2X ",valsout[i]);
     ffa:	0f 2e       	mov	r0, r31
     ffc:	fe e0       	ldi	r31, 0x0E	; 14
     ffe:	cf 2e       	mov	r12, r31
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	df 2e       	mov	r13, r31
    1004:	f0 2d       	mov	r31, r0
    1006:	f8 01       	movw	r30, r16
    1008:	81 91       	ld	r24, Z+
    100a:	8f 01       	movw	r16, r30
    100c:	1f 92       	push	r1
    100e:	8f 93       	push	r24
    1010:	df 92       	push	r13
    1012:	cf 92       	push	r12
    1014:	9f 92       	push	r9
    1016:	ef 92       	push	r14
    1018:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
				UART_Transmit_String(&UART1,0,prnt_buffer);
    101c:	4e 2d       	mov	r20, r14
    101e:	59 2d       	mov	r21, r9
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	88 ec       	ldi	r24, 0xC8	; 200
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
        error_flag=Receive_Response(5,valsout);
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
		Output_Set(&PB,(LED1));  //GREENLED=1;
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
	    UART_Transmit_String(&UART1,0,prnt_buffer);
        for(i=0;i<5;i++)
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	a0 16       	cp	r10, r16
    1038:	b1 06       	cpc	r11, r17
    103a:	29 f7       	brne	.-54     	; 0x1006 <SD_Card_Init+0x25e>
		{   
		        sprintf(prnt_buffer, "%2.2X ",valsout[i]);
				UART_Transmit_String(&UART1,0,prnt_buffer);
		}
        UART_Transmit(&UART1,CR);
    103c:	6d e0       	ldi	r22, 0x0D	; 13
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
        UART_Transmit(&UART1,LF);
    1046:	6a e0       	ldi	r22, 0x0A	; 10
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
		if(valsout[4]!=0xAA)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	8a 3a       	cpi	r24, 0xAA	; 170
    1054:	09 f0       	breq	.+2      	; 0x1058 <SD_Card_Init+0x2b0>
    1056:	a2 c2       	rjmp	.+1348   	; 0x159c <SD_Card_Init+0x7f4>
    1058:	10 c0       	rjmp	.+32     	; 0x107a <SD_Card_Init+0x2d2>
		   error_flag=response_error;
		}
     }
     else
     {
        Output_Set(&PB,(SD_CS));  // Set nCS = 1
    105a:	60 e1       	ldi	r22, 0x10	; 16
    105c:	83 e2       	ldi	r24, 0x23	; 35
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    1064:	68 e0       	ldi	r22, 0x08	; 8
    1066:	83 e2       	ldi	r24, 0x23	; 35
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Output_Clear(&PA,(LED3)); //REDLED=0;  indicates error has occured.
    106e:	60 e8       	ldi	r22, 0x80	; 128
    1070:	80 e2       	ldi	r24, 0x20	; 32
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
    1078:	02 c0       	rjmp	.+4      	; 0x107e <SD_Card_Init+0x2d6>
     }
	 if(error_flag!=no_errors)
    107a:	ff 20       	and	r15, r15
    107c:	19 f1       	breq	.+70     	; 0x10c4 <SD_Card_Init+0x31c>
	 {
        if(error_flag==illegal_cmnd)
    107e:	f2 e8       	ldi	r31, 0x82	; 130
    1080:	ff 12       	cpse	r15, r31
    1082:	7e c2       	rjmp	.+1276   	; 0x1580 <SD_Card_Init+0x7d8>
        {
           error_status=no_errors;
		   SD_Card_Type=Standard_Capacity;
    1084:	89 e0       	ldi	r24, 0x09	; 9
    1086:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		   Copy_String_to_Buffer(SD_Card_V1,0,prnt_buffer);
    108a:	4e 2d       	mov	r20, r14
    108c:	59 2d       	mov	r21, r9
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	8a e9       	ldi	r24, 0x9A	; 154
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		   UART_Transmit_String(&UART1,0,prnt_buffer);
    1098:	4e 2d       	mov	r20, r14
    109a:	59 2d       	mov	r21, r9
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	88 ec       	ldi	r24, 0xC8	; 200
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
		   Copy_String_to_Buffer(SD_Card_SC,0,prnt_buffer);
    10a6:	4e 2d       	mov	r20, r14
    10a8:	59 2d       	mov	r21, r9
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	89 e5       	ldi	r24, 0x59	; 89
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		   UART_Transmit_String(&UART1,0,prnt_buffer);
    10b4:	4e 2d       	mov	r20, r14
    10b6:	59 2d       	mov	r21, r9
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    10c2:	3b c2       	rjmp	.+1142   	; 0x153a <SD_Card_Init+0x792>
		   error_status=error_flag;
		}
	 }
	 else
	 {
		SD_Card_Type=Ver2;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		Copy_String_to_Buffer(SD_Card_V2,0,prnt_buffer);
    10ca:	4e 2d       	mov	r20, r14
    10cc:	59 2d       	mov	r21, r9
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	8c e7       	ldi	r24, 0x7C	; 124
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		UART_Transmit_String(&UART1,0,prnt_buffer);
    10d8:	4e 2d       	mov	r20, r14
    10da:	59 2d       	mov	r21, r9
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    10e6:	29 c2       	rjmp	.+1106   	; 0x153a <SD_Card_Init+0x792>
     UART_Transmit_String(&UART1,0,prnt_buffer);
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
     error_flag=Send_Command(CMD58,0);
	 if(error_flag==no_errors)
     {
        error_flag=Receive_Response(5,valsout);
    10e8:	be 01       	movw	r22, r28
    10ea:	6f 5f       	subi	r22, 0xFF	; 255
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
    10f4:	f8 2e       	mov	r15, r24
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
    10f6:	60 e1       	ldi	r22, 0x10	; 16
    10f8:	83 e2       	ldi	r24, 0x23	; 35
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
		Output_Set(&PB,(LED1));  //GREENLED=1;
    1100:	68 e0       	ldi	r22, 0x08	; 8
    1102:	83 e2       	ldi	r24, 0x23	; 35
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
    110a:	4e 2d       	mov	r20, r14
    110c:	59 2d       	mov	r21, r9
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	88 eb       	ldi	r24, 0xB8	; 184
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
	    UART_Transmit_String(&UART1,0,prnt_buffer);
    1118:	4e 2d       	mov	r20, r14
    111a:	59 2d       	mov	r21, r9
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	88 ec       	ldi	r24, 0xC8	; 200
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    1126:	8e 01       	movw	r16, r28
    1128:	0f 5f       	subi	r16, 0xFF	; 255
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	5e 01       	movw	r10, r28
    112e:	86 e0       	ldi	r24, 0x06	; 6
    1130:	a8 0e       	add	r10, r24
    1132:	b1 1c       	adc	r11, r1
        for(i=0;i<5;i++)
		{   
		     sprintf(prnt_buffer, "%2.2X ",valsout[i]);
    1134:	0f 2e       	mov	r0, r31
    1136:	fe e0       	ldi	r31, 0x0E	; 14
    1138:	cf 2e       	mov	r12, r31
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	df 2e       	mov	r13, r31
    113e:	f0 2d       	mov	r31, r0
    1140:	f8 01       	movw	r30, r16
    1142:	81 91       	ld	r24, Z+
    1144:	8f 01       	movw	r16, r30
    1146:	1f 92       	push	r1
    1148:	8f 93       	push	r24
    114a:	df 92       	push	r13
    114c:	cf 92       	push	r12
    114e:	9f 92       	push	r9
    1150:	ef 92       	push	r14
    1152:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
			 UART_Transmit_String(&UART1,0,prnt_buffer);
    1156:	4e 2d       	mov	r20, r14
    1158:	59 2d       	mov	r21, r9
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
        error_flag=Receive_Response(5,valsout);
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
		Output_Set(&PB,(LED1));  //GREENLED=1;
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
	    UART_Transmit_String(&UART1,0,prnt_buffer);
        for(i=0;i<5;i++)
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	a0 16       	cp	r10, r16
    1172:	b1 06       	cpc	r11, r17
    1174:	29 f7       	brne	.-54     	; 0x1140 <SD_Card_Init+0x398>
		{   
		     sprintf(prnt_buffer, "%2.2X ",valsout[i]);
			 UART_Transmit_String(&UART1,0,prnt_buffer);
		}
        UART_Transmit(&UART1,CR);
    1176:	6d e0       	ldi	r22, 0x0D	; 13
    1178:	88 ec       	ldi	r24, 0xC8	; 200
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
        UART_Transmit(&UART1,LF);
    1180:	6a e0       	ldi	r22, 0x0A	; 10
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
		if((valsout[2]&0xFC)!=0xFC)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	8c 7f       	andi	r24, 0xFC	; 252
    118e:	8c 3f       	cpi	r24, 0xFC	; 252
    1190:	09 f0       	breq	.+2      	; 0x1194 <SD_Card_Init+0x3ec>
    1192:	11 c2       	rjmp	.+1058   	; 0x15b6 <SD_Card_Init+0x80e>
    1194:	10 c0       	rjmp	.+32     	; 0x11b6 <SD_Card_Init+0x40e>
		   error_flag=voltage_error;
		}
     }
     else
     {
        Output_Set(&PB,(SD_CS));  // Set nCS = 1
    1196:	60 e1       	ldi	r22, 0x10	; 16
    1198:	83 e2       	ldi	r24, 0x23	; 35
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    11a0:	68 e0       	ldi	r22, 0x08	; 8
    11a2:	83 e2       	ldi	r24, 0x23	; 35
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Output_Clear(&PA,(LED3));  //REDLED=0;  indicates error has occured.
    11aa:	60 e8       	ldi	r22, 0x80	; 128
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
    11b4:	04 c2       	rjmp	.+1032   	; 0x15be <SD_Card_Init+0x816>
     }
	 if(error_flag!=no_errors)
    11b6:	f1 10       	cpse	r15, r1
    11b8:	02 c2       	rjmp	.+1028   	; 0x15be <SD_Card_Init+0x816>
	    error_status=error_flag;
	 }
   }
   if(error_status==no_errors)
   {
     if(SD_Card_Type==Ver2)
    11ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
    11be:	82 30       	cpi	r24, 0x02	; 2
    11c0:	21 f0       	breq	.+8      	; 0x11ca <SD_Card_Init+0x422>
	 {
	    argument=0x40000000;
	 }
	 else
	 {
	    argument=0;
    11c2:	41 2c       	mov	r4, r1
    11c4:	51 2c       	mov	r5, r1
    11c6:	32 01       	movw	r6, r4
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <SD_Card_Init+0x42c>
   }
   if(error_status==no_errors)
   {
     if(SD_Card_Type==Ver2)
	 {
	    argument=0x40000000;
    11ca:	41 2c       	mov	r4, r1
    11cc:	51 2c       	mov	r5, r1
    11ce:	32 01       	movw	r6, r4
    11d0:	68 94       	set
    11d2:	76 f8       	bld	r7, 6
	 else
	 {
	    argument=0;
	 }
	 timeout=0;
     Output_Clear(&PB,(LED1));  //GREENLED=0;
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	83 e2       	ldi	r24, 0x23	; 35
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     Copy_String_to_Buffer(SD_Card_ACMD41,0,prnt_buffer);
    11de:	4e 2d       	mov	r20, r14
    11e0:	59 2d       	mov	r21, r9
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	84 ec       	ldi	r24, 0xC4	; 196
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
     UART_Transmit_String(&UART1,0,prnt_buffer);
    11ec:	4e 2d       	mov	r20, r14
    11ee:	59 2d       	mov	r21, r9
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	88 ec       	ldi	r24, 0xC8	; 200
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
    11fa:	60 e1       	ldi	r22, 0x10	; 16
    11fc:	83 e2       	ldi	r24, 0x23	; 35
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	 }
	 else
	 {
	    argument=0;
	 }
	 timeout=0;
    1204:	00 e0       	ldi	r16, 0x00	; 0
    1206:	10 e0       	ldi	r17, 0x00	; 0
     UART_Transmit_String(&UART1,0,prnt_buffer);
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
	 do
	 {
	    //P3_5=0;
	    error_flag=Send_Command(CMD55,0);
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	ba 01       	movw	r22, r20
    120e:	87 e3       	ldi	r24, 0x37	; 55
    1210:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
    1214:	f8 2e       	mov	r15, r24
		if(error_flag==no_errors)  error_flag=Receive_Response(1,valsout);
    1216:	81 11       	cpse	r24, r1
    1218:	b7 c1       	rjmp	.+878    	; 0x1588 <SD_Card_Init+0x7e0>
    121a:	be 01       	movw	r22, r28
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
    1226:	f8 2e       	mov	r15, r24
		//P3_5=1;
	    if((valsout[0]==0x01)||(valsout[0]==0x00))
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	30 f4       	brcc	.+12     	; 0x123a <SD_Card_Init+0x492>
		   error_flag=Send_Command(ACMD41,argument);
    122e:	b3 01       	movw	r22, r6
    1230:	a2 01       	movw	r20, r4
    1232:	89 e2       	ldi	r24, 0x29	; 41
    1234:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
    1238:	f8 2e       	mov	r15, r24
	    if(error_flag==no_errors) Receive_Response(1,valsout);
    123a:	f1 10       	cpse	r15, r1
    123c:	06 c0       	rjmp	.+12     	; 0x124a <SD_Card_Init+0x4a2>
    123e:	be 01       	movw	r22, r28
    1240:	6f 5f       	subi	r22, 0xFF	; 255
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
		timeout++;
    124a:	0f 5f       	subi	r16, 0xFF	; 255
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
		if(timeout==0) error_flag=timeout_error;
    124e:	09 f4       	brne	.+2      	; 0x1252 <SD_Card_Init+0x4aa>
    1250:	aa c1       	rjmp	.+852    	; 0x15a6 <SD_Card_Init+0x7fe>
	   }while(((valsout[0]&0x01)==0x01)&&(error_flag==no_errors));
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	80 ff       	sbrs	r24, 0
    1256:	03 c0       	rjmp	.+6      	; 0x125e <SD_Card_Init+0x4b6>
    1258:	ff 20       	and	r15, r15
    125a:	b1 f2       	breq	.-84     	; 0x1208 <SD_Card_Init+0x460>
    125c:	37 c0       	rjmp	.+110    	; 0x12cc <SD_Card_Init+0x524>
	 if(error_flag==no_errors)
    125e:	f1 10       	cpse	r15, r1
    1260:	35 c0       	rjmp	.+106    	; 0x12cc <SD_Card_Init+0x524>
     {
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
    1262:	60 e1       	ldi	r22, 0x10	; 16
    1264:	83 e2       	ldi	r24, 0x23	; 35
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    126c:	68 e0       	ldi	r22, 0x08	; 8
    126e:	83 e2       	ldi	r24, 0x23	; 35
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
    1276:	4e 2d       	mov	r20, r14
    1278:	59 2d       	mov	r21, r9
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	88 eb       	ldi	r24, 0xB8	; 184
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
	    UART_Transmit_String(&UART1,0,prnt_buffer);
    1284:	4e 2d       	mov	r20, r14
    1286:	59 2d       	mov	r21, r9
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	88 ec       	ldi	r24, 0xC8	; 200
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
		sprintf(prnt_buffer, "%2.2X \n\r",valsout[0]);
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	1f 92       	push	r1
    1296:	8f 93       	push	r24
    1298:	8d e1       	ldi	r24, 0x1D	; 29
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	9f 92       	push	r9
    12a2:	ef 92       	push	r14
    12a4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
		UART_Transmit_String(&UART1,0,prnt_buffer);
    12a8:	4e 2d       	mov	r20, r14
    12aa:	59 2d       	mov	r21, r9
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	15 c0       	rjmp	.+42     	; 0x12ee <SD_Card_Init+0x546>
		//P3_5=1;
	    if((valsout[0]==0x01)||(valsout[0]==0x00))
		   error_flag=Send_Command(ACMD41,argument);
	    if(error_flag==no_errors) Receive_Response(1,valsout);
		timeout++;
		if(timeout==0) error_flag=timeout_error;
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f1 e8       	ldi	r31, 0x81	; 129
    12c8:	ff 2e       	mov	r15, r31
    12ca:	f0 2d       	mov	r31, r0
		sprintf(prnt_buffer, "%2.2X \n\r",valsout[0]);
		UART_Transmit_String(&UART1,0,prnt_buffer);
     }
     else
     {
        Output_Set(&PB,(SD_CS));  // Set nCS = 1
    12cc:	60 e1       	ldi	r22, 0x10	; 16
    12ce:	83 e2       	ldi	r24, 0x23	; 35
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    12d6:	68 e0       	ldi	r22, 0x08	; 8
    12d8:	83 e2       	ldi	r24, 0x23	; 35
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Output_Clear(&PA,(LED3));  //REDLED=0;  indicates error has occured.
    12e0:	60 e8       	ldi	r22, 0x80	; 128
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	 if(error_flag!=no_errors)
	 {		
	    error_status=error_flag;
	 }
   }
   if((error_status==no_errors)&&(SD_Card_Type==Ver2))
    12ea:	f1 10       	cpse	r15, r1
    12ec:	68 c1       	rjmp	.+720    	; 0x15be <SD_Card_Init+0x816>
    12ee:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <SD_Card_Init+0x550>
    12f6:	18 c1       	rjmp	.+560    	; 0x1528 <SD_Card_Init+0x780>
   {
     Output_Clear(&PB,(LED1));  //GREENLED=0;
    12f8:	68 e0       	ldi	r22, 0x08	; 8
    12fa:	83 e2       	ldi	r24, 0x23	; 35
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     Copy_String_to_Buffer(SD_Card_CMD58,0,prnt_buffer);
    1302:	4e 2d       	mov	r20, r14
    1304:	59 2d       	mov	r21, r9
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	85 ed       	ldi	r24, 0xD5	; 213
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
     UART_Transmit_String(&UART1,0,prnt_buffer);
    1310:	4e 2d       	mov	r20, r14
    1312:	59 2d       	mov	r21, r9
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	88 ec       	ldi	r24, 0xC8	; 200
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
    131e:	60 e1       	ldi	r22, 0x10	; 16
    1320:	83 e2       	ldi	r24, 0x23	; 35
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     error_flag=Send_Command(CMD58,0);
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	ba 01       	movw	r22, r20
    132e:	8a e3       	ldi	r24, 0x3A	; 58
    1330:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
    1334:	f8 2e       	mov	r15, r24
	 if(error_flag==no_errors)
    1336:	81 11       	cpse	r24, r1
    1338:	e2 c0       	rjmp	.+452    	; 0x14fe <SD_Card_Init+0x756>
     {
        error_flag=Receive_Response(5,valsout);
    133a:	be 01       	movw	r22, r28
    133c:	6f 5f       	subi	r22, 0xFF	; 255
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
    1346:	f8 2e       	mov	r15, r24
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
    1348:	60 e1       	ldi	r22, 0x10	; 16
    134a:	83 e2       	ldi	r24, 0x23	; 35
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    1352:	68 e0       	ldi	r22, 0x08	; 8
    1354:	83 e2       	ldi	r24, 0x23	; 35
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
    135c:	4e 2d       	mov	r20, r14
    135e:	59 2d       	mov	r21, r9
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	88 eb       	ldi	r24, 0xB8	; 184
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
	    UART_Transmit_String(&UART1,0,prnt_buffer);
    136a:	4e 2d       	mov	r20, r14
    136c:	59 2d       	mov	r21, r9
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	88 ec       	ldi	r24, 0xC8	; 200
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    1378:	8e 01       	movw	r16, r28
    137a:	0f 5f       	subi	r16, 0xFF	; 255
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	5e 01       	movw	r10, r28
    1380:	f6 e0       	ldi	r31, 0x06	; 6
    1382:	af 0e       	add	r10, r31
    1384:	b1 1c       	adc	r11, r1
        for(i=0;i<5;i++)
		{   
           sprintf(prnt_buffer, "%2.2X ",valsout[i]);
    1386:	0f 2e       	mov	r0, r31
    1388:	fe e0       	ldi	r31, 0x0E	; 14
    138a:	cf 2e       	mov	r12, r31
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	df 2e       	mov	r13, r31
    1390:	f0 2d       	mov	r31, r0
    1392:	f8 01       	movw	r30, r16
    1394:	81 91       	ld	r24, Z+
    1396:	8f 01       	movw	r16, r30
    1398:	1f 92       	push	r1
    139a:	8f 93       	push	r24
    139c:	df 92       	push	r13
    139e:	cf 92       	push	r12
    13a0:	9f 92       	push	r9
    13a2:	ef 92       	push	r14
    13a4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
		   UART_Transmit_String(&UART1,0,prnt_buffer);
    13a8:	4e 2d       	mov	r20, r14
    13aa:	59 2d       	mov	r21, r9
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	88 ec       	ldi	r24, 0xC8	; 200
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
        error_flag=Receive_Response(5,valsout);
		Output_Set(&PB,(SD_CS));  // Set nCS = 1
        Output_Set(&PB,(LED1));  //GREENLED=1;
	    Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
	    UART_Transmit_String(&UART1,0,prnt_buffer);
        for(i=0;i<5;i++)
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	a0 16       	cp	r10, r16
    13c4:	b1 06       	cpc	r11, r17
    13c6:	29 f7       	brne	.-54     	; 0x1392 <SD_Card_Init+0x5ea>
		{   
           sprintf(prnt_buffer, "%2.2X ",valsout[i]);
		   UART_Transmit_String(&UART1,0,prnt_buffer);
		}
        UART_Transmit(&UART1,CR);
    13c8:	6d e0       	ldi	r22, 0x0D	; 13
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
        UART_Transmit(&UART1,LF);
    13d2:	6a e0       	ldi	r22, 0x0A	; 10
    13d4:	88 ec       	ldi	r24, 0xC8	; 200
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
		if((valsout[1]&0x80)!=0x80)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 23       	and	r24, r24
    13e0:	0c f0       	brlt	.+2      	; 0x13e4 <SD_Card_Init+0x63c>
    13e2:	d7 c0       	rjmp	.+430    	; 0x1592 <SD_Card_Init+0x7ea>
		{
		   error_flag=card_inactive;
		}
		else
		{
		   if((valsout[1]&0xC0)==0xC0)
    13e4:	80 7c       	andi	r24, 0xC0	; 192
    13e6:	80 3c       	cpi	r24, 0xC0	; 192
    13e8:	89 f4       	brne	.+34     	; 0x140c <SD_Card_Init+0x664>
		   {
		      SD_Card_Type=High_Capacity;
    13ea:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		      Copy_String_to_Buffer(SD_Card_HC,0,prnt_buffer);
    13ee:	4e 2d       	mov	r20, r14
    13f0:	59 2d       	mov	r21, r9
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	8a e3       	ldi	r24, 0x3A	; 58
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
		      UART_Transmit_String(&UART1,0,prnt_buffer);
    13fc:	4e 2d       	mov	r20, r14
    13fe:	59 2d       	mov	r21, r9
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	88 ec       	ldi	r24, 0xC8	; 200
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    140a:	d9 c0       	rjmp	.+434    	; 0x15be <SD_Card_Init+0x816>
			  //sprintf(print_buffer,"High Capacity");
			  //LCD_Print(0,print_buffer);
		   }
		   else
		   {
		      SD_Card_Type=Standard_Capacity;
    140c:	89 e0       	ldi	r24, 0x09	; 9
    140e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
			  Copy_String_to_Buffer(SD_Card_SC,0,prnt_buffer);
    1412:	4e 2d       	mov	r20, r14
    1414:	59 2d       	mov	r21, r9
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	89 e5       	ldi	r24, 0x59	; 89
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
			  UART_Transmit_String(&UART1,0,prnt_buffer);
    1420:	4e 2d       	mov	r20, r14
    1422:	59 2d       	mov	r21, r9
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
			  //LCD_Write(COMMAND,set_ddram_addr|line2);
			  //sprintf(print_buffer,"Standard Cap.");
			  //LCD_Print(0,print_buffer);
			  Output_Clear(&PB,(LED1));  //GREENLED=0;
    142e:	68 e0       	ldi	r22, 0x08	; 8
    1430:	83 e2       	ldi	r24, 0x23	; 35
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
              Copy_String_to_Buffer(SD_Card_CMD16,0,prnt_buffer);
    1438:	4e 2d       	mov	r20, r14
    143a:	59 2d       	mov	r21, r9
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	85 ee       	ldi	r24, 0xE5	; 229
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
              UART_Transmit_String(&UART1,0,prnt_buffer);
    1446:	4e 2d       	mov	r20, r14
    1448:	59 2d       	mov	r21, r9
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
              Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
    1454:	60 e1       	ldi	r22, 0x10	; 16
    1456:	83 e2       	ldi	r24, 0x23	; 35
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
              error_flag=Send_Command(CMD16,512);
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	52 e0       	ldi	r21, 0x02	; 2
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	80 e1       	ldi	r24, 0x10	; 16
    1468:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
    146c:	f8 2e       	mov	r15, r24
	          if(error_flag==no_errors)
    146e:	81 11       	cpse	r24, r1
    1470:	a6 c0       	rjmp	.+332    	; 0x15be <SD_Card_Init+0x816>
              {
                  error_flag=Receive_Response(1,valsout);
    1472:	be 01       	movw	r22, r28
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	0e 94 32 06 	call	0xc64	; 0xc64 <Receive_Response>
    147e:	f8 2e       	mov	r15, r24
		          Output_Set(&PB,(SD_CS));  // Set nCS = 1
    1480:	60 e1       	ldi	r22, 0x10	; 16
    1482:	83 e2       	ldi	r24, 0x23	; 35
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
                  Output_Set(&PB,(LED1));  //GREENLED=1;
    148a:	68 e0       	ldi	r22, 0x08	; 8
    148c:	83 e2       	ldi	r24, 0x23	; 35
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
				  Copy_String_to_Buffer(SD_Card_Resp,0,prnt_buffer);
    1494:	4e 2d       	mov	r20, r14
    1496:	59 2d       	mov	r21, r9
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	88 eb       	ldi	r24, 0xB8	; 184
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
				  UART_Transmit_String(&UART1,0,prnt_buffer);
    14a2:	4e 2d       	mov	r20, r14
    14a4:	59 2d       	mov	r21, r9
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
	              sprintf(prnt_buffer, "%2.2X \n\r",valsout[0]);
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	1f 92       	push	r1
    14b4:	8f 93       	push	r24
    14b6:	8d e1       	ldi	r24, 0x1D	; 29
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	9f 92       	push	r9
    14c0:	ef 92       	push	r14
    14c2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <sprintf>
				  UART_Transmit_String(&UART1,0,prnt_buffer);
    14c6:	4e 2d       	mov	r20, r14
    14c8:	59 2d       	mov	r21, r9
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
                  Copy_String_to_Buffer(SD_Card_BlSz,0,prnt_buffer);
    14d4:	4e 2d       	mov	r20, r14
    14d6:	59 2d       	mov	r21, r9
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	8c e1       	ldi	r24, 0x1C	; 28
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
                  UART_Transmit_String(&UART1,0,prnt_buffer);
    14e2:	4e 2d       	mov	r20, r14
    14e4:	59 2d       	mov	r21, r9
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	60 c0       	rjmp	.+192    	; 0x15be <SD_Card_Init+0x816>
			}
		 }
     }
     else
     {
        Output_Set(&PB,(SD_CS));  // Set nCS = 1
    14fe:	60 e1       	ldi	r22, 0x10	; 16
    1500:	83 e2       	ldi	r24, 0x23	; 35
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
        Output_Set(&PB,(LED1));  //GREENLED=1;
    1508:	68 e0       	ldi	r22, 0x08	; 8
    150a:	83 e2       	ldi	r24, 0x23	; 35
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
	    Output_Clear(&PA,(LED3));  //REDLED=0; indicates error has occured.
    1512:	60 e8       	ldi	r22, 0x80	; 128
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
    151c:	50 c0       	rjmp	.+160    	; 0x15be <SD_Card_Init+0x816>
		  }
		  timeout++;
   } while ((valsout[0]!=0x01)&&(timeout<10));
   if(timeout==10)
   {
	   error_flag=response_error;
    151e:	0f 2e       	mov	r0, r31
    1520:	f3 e8       	ldi	r31, 0x83	; 131
    1522:	ff 2e       	mov	r15, r31
    1524:	f0 2d       	mov	r31, r0
    1526:	4b c0       	rjmp	.+150    	; 0x15be <SD_Card_Init+0x816>
    1528:	f1 2c       	mov	r15, r1
    152a:	49 c0       	rjmp	.+146    	; 0x15be <SD_Card_Init+0x816>
			  {
				  SPI_return=SPI_Transfer(&SD_PORT,0xFF);
			  }
			  Output_Set(&PB,(SD_CS));
		  }
		  timeout++;
    152c:	ff ef       	ldi	r31, 0xFF	; 255
    152e:	cf 1a       	sub	r12, r31
    1530:	df 0a       	sbc	r13, r31
    1532:	15 cd       	rjmp	.-1494   	; 0xf5e <SD_Card_Init+0x1b6>
   {
	   error_flag=response_error;
	   error_status=response_error;
   }

   if(error_flag!=no_errors)
    1534:	f1 10       	cpse	r15, r1
    1536:	d9 ce       	rjmp	.-590    	; 0x12ea <SD_Card_Init+0x542>
    1538:	18 cd       	rjmp	.-1488   	; 0xf6a <SD_Card_Init+0x1c2>
		UART_Transmit_String(&UART1,0,prnt_buffer);
	 }
   }
   if(error_status==no_errors)
   {
     Output_Clear(&PB,(LED1));  //GREENLED=0;
    153a:	68 e0       	ldi	r22, 0x08	; 8
    153c:	83 e2       	ldi	r24, 0x23	; 35
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     Copy_String_to_Buffer(SD_Card_CMD58,0,prnt_buffer);
    1544:	4e 2d       	mov	r20, r14
    1546:	59 2d       	mov	r21, r9
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	85 ed       	ldi	r24, 0xD5	; 213
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 be 0b 	call	0x177c	; 0x177c <Copy_String_to_Buffer>
     UART_Transmit_String(&UART1,0,prnt_buffer);
    1552:	4e 2d       	mov	r20, r14
    1554:	59 2d       	mov	r21, r9
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <UART_Transmit_String>
     Output_Clear(&PB,(SD_CS));  // Clear nCS = 0
    1560:	60 e1       	ldi	r22, 0x10	; 16
    1562:	83 e2       	ldi	r24, 0x23	; 35
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
     error_flag=Send_Command(CMD58,0);
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	ba 01       	movw	r22, r20
    1570:	8a e3       	ldi	r24, 0x3A	; 58
    1572:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_Command>
    1576:	f8 2e       	mov	r15, r24
	 if(error_flag==no_errors)
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <SD_Card_Init+0x7d6>
    157c:	b5 cd       	rjmp	.-1174   	; 0x10e8 <SD_Card_Init+0x340>
    157e:	0b ce       	rjmp	.-1002   	; 0x1196 <SD_Card_Init+0x3ee>
	 if(error_flag!=no_errors)
	 {		
	    error_status=error_flag;
	 }
   }
   if(error_status==no_errors)
    1580:	ff 20       	and	r15, r15
    1582:	09 f4       	brne	.+2      	; 0x1586 <SD_Card_Init+0x7de>
    1584:	1a ce       	rjmp	.-972    	; 0x11ba <SD_Card_Init+0x412>
    1586:	1b c0       	rjmp	.+54     	; 0x15be <SD_Card_Init+0x816>
	 {
	    //P3_5=0;
	    error_flag=Send_Command(CMD55,0);
		if(error_flag==no_errors)  error_flag=Receive_Response(1,valsout);
		//P3_5=1;
	    if((valsout[0]==0x01)||(valsout[0]==0x00))
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	08 f0       	brcs	.+2      	; 0x1590 <SD_Card_Init+0x7e8>
    158e:	5d ce       	rjmp	.-838    	; 0x124a <SD_Card_Init+0x4a2>
    1590:	4e ce       	rjmp	.-868    	; 0x122e <SD_Card_Init+0x486>
		}
        UART_Transmit(&UART1,CR);
        UART_Transmit(&UART1,LF);
		if((valsout[1]&0x80)!=0x80)
		{
		   error_flag=card_inactive;
    1592:	0f 2e       	mov	r0, r31
    1594:	f6 e8       	ldi	r31, 0x86	; 134
    1596:	ff 2e       	mov	r15, r31
    1598:	f0 2d       	mov	r31, r0
    159a:	11 c0       	rjmp	.+34     	; 0x15be <SD_Card_Init+0x816>
		}
        UART_Transmit(&UART1,CR);
        UART_Transmit(&UART1,LF);
		if(valsout[4]!=0xAA)
		{
		   error_flag=response_error;
    159c:	0f 2e       	mov	r0, r31
    159e:	f3 e8       	ldi	r31, 0x83	; 131
    15a0:	ff 2e       	mov	r15, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	a2 ce       	rjmp	.-700    	; 0x12ea <SD_Card_Init+0x542>
	    if((valsout[0]==0x01)||(valsout[0]==0x00))
		   error_flag=Send_Command(ACMD41,argument);
	    if(error_flag==no_errors) Receive_Response(1,valsout);
		timeout++;
		if(timeout==0) error_flag=timeout_error;
	   }while(((valsout[0]&0x01)==0x01)&&(error_flag==no_errors));
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	80 fd       	sbrc	r24, 0
    15aa:	8c ce       	rjmp	.-744    	; 0x12c4 <SD_Card_Init+0x51c>
		//P3_5=1;
	    if((valsout[0]==0x01)||(valsout[0]==0x00))
		   error_flag=Send_Command(ACMD41,argument);
	    if(error_flag==no_errors) Receive_Response(1,valsout);
		timeout++;
		if(timeout==0) error_flag=timeout_error;
    15ac:	0f 2e       	mov	r0, r31
    15ae:	f1 e8       	ldi	r31, 0x81	; 129
    15b0:	ff 2e       	mov	r15, r31
    15b2:	f0 2d       	mov	r31, r0
    15b4:	54 ce       	rjmp	.-856    	; 0x125e <SD_Card_Init+0x4b6>
		}
        UART_Transmit(&UART1,CR);
        UART_Transmit(&UART1,LF);
		if((valsout[2]&0xFC)!=0xFC)
		{
		   error_flag=voltage_error;
    15b6:	0f 2e       	mov	r0, r31
    15b8:	f5 e8       	ldi	r31, 0x85	; 133
    15ba:	ff 2e       	mov	r15, r31
    15bc:	f0 2d       	mov	r31, r0
 /*if(error_status!=no_errors)
 {		
	//Print_Error(error_status);
 } */
return error_status;
}
    15be:	8f 2d       	mov	r24, r15
    15c0:	28 96       	adiw	r28, 0x08	; 8
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	bf 90       	pop	r11
    15de:	af 90       	pop	r10
    15e0:	9f 90       	pop	r9
    15e2:	7f 90       	pop	r7
    15e4:	6f 90       	pop	r6
    15e6:	5f 90       	pop	r5
    15e8:	4f 90       	pop	r4
    15ea:	08 95       	ret

000015ec <Return_SD_Card_Type>:
************************************************************************/

uint8_t Return_SD_Card_Type(void)
{
   return SD_Card_Type;
}
    15ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
    15f0:	08 95       	ret

000015f2 <SPI_Master_Init>:
CAUTION: Sets the CPHA to 0 and CPOL to 0
         Disables SS and sets master mode 
************************************************************************/

uint8_t SPI_Master_Init(uint8_t volatile *SPI_addr, uint32_t clock_rate)
{
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	ec 01       	movw	r28, r24
    1600:	6a 01       	movw	r12, r20
    1602:	7b 01       	movw	r14, r22
  uint8_t divider,return_val,SPR_val;
  // Enable MOSI and SCK outputs
  if(SPI_addr==&SPI0)
    1604:	8c 34       	cpi	r24, 0x4C	; 76
    1606:	91 05       	cpc	r25, r1
    1608:	a9 f4       	brne	.+42     	; 0x1634 <SPI_Master_Init+0x42>
  {
     Output_Set(&PB,MOSI);
    160a:	60 e2       	ldi	r22, 0x20	; 32
    160c:	83 e2       	ldi	r24, 0x23	; 35
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
     Output_Init(&PB,MOSI);
    1614:	60 e2       	ldi	r22, 0x20	; 32
    1616:	83 e2       	ldi	r24, 0x23	; 35
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	 if(Clock_Polarity==0)
	 {
	   Output_Clear(&PB,SCK);
    161e:	60 e8       	ldi	r22, 0x80	; 128
    1620:	83 e2       	ldi	r24, 0x23	; 35
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	   Output_Init(&PB,SCK);
    1628:	60 e8       	ldi	r22, 0x80	; 128
    162a:	83 e2       	ldi	r24, 0x23	; 35
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
    1632:	17 c0       	rjmp	.+46     	; 0x1662 <SPI_Master_Init+0x70>
	 {
	   Output_Set(&PB,SCK);
	   Output_Init(&PB,SCK);
	 }
  }
  else if(SPI_addr==&SPI1)
    1634:	8c 3a       	cpi	r24, 0xAC	; 172
    1636:	91 05       	cpc	r25, r1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <SPI_Master_Init+0x70>
  {
     Output_Set(&PE,(1<<3));
    163a:	68 e0       	ldi	r22, 0x08	; 8
    163c:	8c e2       	ldi	r24, 0x2C	; 44
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 3d 01 	call	0x27a	; 0x27a <Output_Set>
     Output_Init(&PE,(1<<3));
    1644:	68 e0       	ldi	r22, 0x08	; 8
    1646:	8c e2       	ldi	r24, 0x2C	; 44
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	 if(Clock_Polarity==0)
	 {
	   Output_Clear(&PD,(1<<7));
    164e:	60 e8       	ldi	r22, 0x80	; 128
    1650:	89 e2       	ldi	r24, 0x29	; 41
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 42 01 	call	0x284	; 0x284 <Output_Clear>
	   Output_Init(&PD,(1<<7));
    1658:	60 e8       	ldi	r22, 0x80	; 128
    165a:	89 e2       	ldi	r24, 0x29	; 41
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 38 01 	call	0x270	; 0x270 <Output_Init>
	 }
  }


  return_val=no_errors;
  divider=(uint8_t)((F_CPU/F_DIV)/clock_rate);
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	74 e2       	ldi	r23, 0x24	; 36
    1666:	84 ef       	ldi	r24, 0xF4	; 244
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a7 01       	movw	r20, r14
    166c:	96 01       	movw	r18, r12
    166e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmodsi4>
  if(divider<2)
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	30 f4       	brcc	.+12     	; 0x1682 <SPI_Master_Init+0x90>
  {
     SPR_val=0;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    1676:	80 e5       	ldi	r24, 0x50	; 80
    1678:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	38 c0       	rjmp	.+112    	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=0;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=1;
  }
  else if((divider>=2)&&(divider<4))
    1682:	8e ef       	ldi	r24, 0xFE	; 254
    1684:	82 0f       	add	r24, r18
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	28 f4       	brcc	.+10     	; 0x1694 <SPI_Master_Init+0xa2>
  {
     SPR_val=0;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    168a:	80 e5       	ldi	r24, 0x50	; 80
    168c:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=0;
    168e:	19 82       	std	Y+1, r1	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	2f c0       	rjmp	.+94     	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=0;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=0;
  }
  else if((divider>=4)&&(divider<8))
    1694:	8c ef       	ldi	r24, 0xFC	; 252
    1696:	82 0f       	add	r24, r18
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	30 f4       	brcc	.+12     	; 0x16a8 <SPI_Master_Init+0xb6>
  {
     SPR_val=1;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    169c:	81 e5       	ldi	r24, 0x51	; 81
    169e:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	25 c0       	rjmp	.+74     	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=1;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=1;
  }
  else if((divider>=8)&&(divider<16))
    16a8:	88 ef       	ldi	r24, 0xF8	; 248
    16aa:	82 0f       	add	r24, r18
    16ac:	88 30       	cpi	r24, 0x08	; 8
    16ae:	28 f4       	brcc	.+10     	; 0x16ba <SPI_Master_Init+0xc8>
  {
     SPR_val=1;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    16b0:	81 e5       	ldi	r24, 0x51	; 81
    16b2:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=0;
    16b4:	19 82       	std	Y+1, r1	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	1c c0       	rjmp	.+56     	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=1;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=0;
  } 
  else if((divider>=16)&&(divider<32))
    16ba:	80 ef       	ldi	r24, 0xF0	; 240
    16bc:	82 0f       	add	r24, r18
    16be:	80 31       	cpi	r24, 0x10	; 16
    16c0:	30 f4       	brcc	.+12     	; 0x16ce <SPI_Master_Init+0xdc>
  {
     SPR_val=2;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    16c2:	82 e5       	ldi	r24, 0x52	; 82
    16c4:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	12 c0       	rjmp	.+36     	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=2;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=1;
  }
  else if((divider>=32)&&(divider<64))
    16ce:	80 ee       	ldi	r24, 0xE0	; 224
    16d0:	82 0f       	add	r24, r18
    16d2:	80 32       	cpi	r24, 0x20	; 32
    16d4:	28 f4       	brcc	.+10     	; 0x16e0 <SPI_Master_Init+0xee>
  {
     SPR_val=2;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    16d6:	82 e5       	ldi	r24, 0x52	; 82
    16d8:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=0;
    16da:	19 82       	std	Y+1, r1	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	09 c0       	rjmp	.+18     	; 0x16f2 <SPI_Master_Init+0x100>
  {
     SPR_val=2;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=0;
  }
  else if((divider>=64)&&(divider<128))
    16e0:	20 54       	subi	r18, 0x40	; 64
    16e2:	20 34       	cpi	r18, 0x40	; 64
    16e4:	28 f4       	brcc	.+10     	; 0x16f0 <SPI_Master_Init+0xfe>
  {
     SPR_val=3;
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
    16e6:	83 e5       	ldi	r24, 0x53	; 83
    16e8:	88 83       	st	Y, r24
	 *(SPI_addr+SPSR)=0;
    16ea:	19 82       	std	Y+1, r1	; 0x01
	   Output_Init(&PD,(1<<7));
	 }
  }


  return_val=no_errors;
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <SPI_Master_Init+0x100>
	 *(SPI_addr+SPCR)=((1<<SPE)|(1<<MSTR)|(Clock_Polarity<<3)|(Clock_Phase<<2)|SPR_val);
	 *(SPI_addr+SPSR)=0;
  }
  else  // if the SPI clock rate is too slow, a divider cannot be found
  {
    return_val=illegal_clockrate;
    16f0:	8f e0       	ldi	r24, 0x0F	; 15
  }
  return return_val;
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	08 95       	ret

00001700 <SPI_Transfer>:
CAUTION: Waits for the SPI transfer to be complete
************************************************************************/


uint8_t SPI_Transfer(uint8_t volatile *SPI_addr, uint8_t data_input)
{
    1700:	fc 01       	movw	r30, r24
   uint8_t test;
   *(SPI_addr+SPDR)=data_input;
    1702:	62 83       	std	Z+2, r22	; 0x02
   do
   {
      test=*(SPI_addr+SPSR);
    1704:	91 81       	ldd	r25, Z+1	; 0x01
   }while((test&0x80)==0);
    1706:	99 23       	and	r25, r25
    1708:	ec f7       	brge	.-6      	; 0x1704 <SPI_Transfer+0x4>
   
   return *(SPI_addr+SPDR);
    170a:	82 81       	ldd	r24, Z+2	; 0x02
}
    170c:	08 95       	ret

0000170e <UART_init>:




void UART_init (uint8_t volatile * UART_addr, uint16_t Baud_Rate)
{
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)(((F_CPU/F_DIV)/(8UL*(2-U2X_bit)*Baud_Rate))-1);
    1714:	cb 01       	movw	r24, r22
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	aa 1f       	adc	r26, r26
    1720:	bb 1f       	adc	r27, r27
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	aa 1f       	adc	r26, r26
    1728:	bb 1f       	adc	r27, r27
    172a:	9c 01       	movw	r18, r24
    172c:	ad 01       	movw	r20, r26
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	44 1f       	adc	r20, r20
    1734:	55 1f       	adc	r21, r21
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	74 e2       	ldi	r23, 0x24	; 36
    173a:	84 ef       	ldi	r24, 0xF4	; 244
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__udivmodsi4>
    1742:	21 50       	subi	r18, 0x01	; 1
    1744:	31 09       	sbc	r19, r1
	
	*(UART_addr+UBBRH) = (Baud_Rate_Reload / 256);
    1746:	3d 83       	std	Y+5, r19	; 0x05
	*(UART_addr+UBBRL) = (Baud_Rate_Reload % 256);
    1748:	2c 83       	std	Y+4, r18	; 0x04
		
	*(UART_addr+UCSRA) = U2X_bit<<1;
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	88 83       	st	Y, r24
	*(UART_addr+UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_bits;
    174e:	86 e0       	ldi	r24, 0x06	; 6
    1750:	8a 83       	std	Y+2, r24	; 0x02
	*(UART_addr+UCSRB) = RX_enable|TX_enable;
    1752:	88 e1       	ldi	r24, 0x18	; 24
    1754:	89 83       	std	Y+1, r24	; 0x01
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <UART_Transmit>:

int8_t UART_Transmit(uint8_t volatile * UART_addr, int8_t c)
{
    175c:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		status=*(UART_addr+UCSRA);
    175e:	90 81       	ld	r25, Z
	} while ((status & (1 << UDRE))!=(1 << UDRE));
    1760:	95 ff       	sbrs	r25, 5
    1762:	fd cf       	rjmp	.-6      	; 0x175e <UART_Transmit+0x2>
	*(UART_addr+UDR) = c;
    1764:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret

0000176a <UART_Receive>:


uint8_t UART_Receive(uint8_t volatile * UART_addr)
{
    176a:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=*(UART_addr+UCSRA);
    176c:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
    176e:	99 23       	and	r25, r25
    1770:	ec f7       	brge	.-6      	; 0x176c <UART_Receive+0x2>
	return *(UART_addr+UDR);  // return the value in the receive buffer
    1772:	86 81       	ldd	r24, Z+6	; 0x06
}
    1774:	08 95       	ret

00001776 <Export_print_buffer>:
//**** Used to make the global print_buffer available to other source code files *****//
uint8_t * Export_print_buffer(void)
{
	
	return print_buffer;
}
    1776:	87 e2       	ldi	r24, 0x27	; 39
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	08 95       	ret

0000177c <Copy_String_to_Buffer>:
//***** If num_bytes!=0, then the specified number of bytes is copied. ****// 
uint8_t Copy_String_to_Buffer(const int8_t * flash_string, uint8_t num_bytes, uint8_t * buffer_p)
{
	uint8_t index;
	uint8_t value;
	if(num_bytes==0)
    177c:	61 11       	cpse	r22, r1
    177e:	0e c0       	rjmp	.+28     	; 0x179c <Copy_String_to_Buffer+0x20>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
    1780:	26 2f       	mov	r18, r22
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    178a:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
    178c:	da 01       	movw	r26, r20
    178e:	a2 0f       	add	r26, r18
    1790:	b3 1f       	adc	r27, r19
    1792:	ec 93       	st	X, r30
			index++;
    1794:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
    1796:	e1 11       	cpse	r30, r1
    1798:	f3 cf       	rjmp	.-26     	; 0x1780 <Copy_String_to_Buffer+0x4>
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <Copy_String_to_Buffer+0x3c>
    179c:	fc 01       	movw	r30, r24
    179e:	da 01       	movw	r26, r20
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	86 0f       	add	r24, r22
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	48 0f       	add	r20, r24
    17aa:	59 1f       	adc	r21, r25
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
    17ac:	84 91       	lpm	r24, Z
			buffer_p[index]=value;
    17ae:	8d 93       	st	X+, r24
    17b0:	31 96       	adiw	r30, 0x01	; 1
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    17b2:	a4 17       	cp	r26, r20
    17b4:	b5 07       	cpc	r27, r21
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <Copy_String_to_Buffer+0x30>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
    17b8:	86 2f       	mov	r24, r22
    17ba:	08 95       	ret

000017bc <UART_Transmit_String>:

//***** Transmits a string of unsigned bytes stored in an SRAM array (print buffer) using the specified UART.  ****//
//***** If num_bytes==0, then the transmitting continues until a NULL termination is found. ****//
//***** If num_bytes!=0, then the specified number of bytes is transmitted. ****//
void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, uint8_t * string_name)
{
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	7c 01       	movw	r14, r24
    17ce:	8a 01       	movw	r16, r20
	int8_t temp8,index;
	if(num_bytes==0)
    17d0:	66 23       	and	r22, r22
    17d2:	31 f0       	breq	.+12     	; 0x17e0 <UART_Transmit_String+0x24>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    17d4:	c6 2e       	mov	r12, r22
    17d6:	d1 2c       	mov	r13, r1
    17d8:	1c 14       	cp	r1, r12
    17da:	1d 04       	cpc	r1, r13
    17dc:	74 f0       	brlt	.+28     	; 0x17fa <UART_Transmit_String+0x3e>
    17de:	1f c0       	rjmp	.+62     	; 0x181e <UART_Transmit_String+0x62>
void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, uint8_t * string_name)
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
    17e0:	fa 01       	movw	r30, r20
    17e2:	60 81       	ld	r22, Z
		while (temp8!=0)
    17e4:	66 23       	and	r22, r22
    17e6:	d9 f0       	breq	.+54     	; 0x181e <UART_Transmit_String+0x62>
    17e8:	ea 01       	movw	r28, r20
    17ea:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Transmit(UART_addr, temp8);
    17ec:	c7 01       	movw	r24, r14
    17ee:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
			string_name++;
			temp8=*string_name;
    17f2:	69 91       	ld	r22, Y+
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
    17f4:	61 11       	cpse	r22, r1
    17f6:	fa cf       	rjmp	.-12     	; 0x17ec <UART_Transmit_String+0x30>
    17f8:	12 c0       	rjmp	.+36     	; 0x181e <UART_Transmit_String+0x62>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    17fa:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_Transmit(UART_addr, string_name[index]);
    17fc:	f8 01       	movw	r30, r16
    17fe:	ec 0f       	add	r30, r28
    1800:	f1 1d       	adc	r31, r1
    1802:	c7 fd       	sbrc	r28, 7
    1804:	fa 95       	dec	r31
    1806:	60 81       	ld	r22, Z
    1808:	c7 01       	movw	r24, r14
    180a:	0e 94 ae 0b 	call	0x175c	; 0x175c <UART_Transmit>
    180e:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    1810:	8c 2f       	mov	r24, r28
    1812:	0c 2e       	mov	r0, r28
    1814:	00 0c       	add	r0, r0
    1816:	99 0b       	sbc	r25, r25
    1818:	8c 15       	cp	r24, r12
    181a:	9d 05       	cpc	r25, r13
    181c:	7c f3       	brlt	.-34     	; 0x17fc <UART_Transmit_String+0x40>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	08 95       	ret

00001830 <__mulsi3>:
    1830:	db 01       	movw	r26, r22
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__muluhisi3>
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	a2 9f       	mul	r26, r18
    1840:	80 0d       	add	r24, r0
    1842:	91 1d       	adc	r25, r1
    1844:	a3 9f       	mul	r26, r19
    1846:	90 0d       	add	r25, r0
    1848:	b2 9f       	mul	r27, r18
    184a:	90 0d       	add	r25, r0
    184c:	11 24       	eor	r1, r1
    184e:	08 95       	ret

00001850 <__udivmodhi4>:
    1850:	aa 1b       	sub	r26, r26
    1852:	bb 1b       	sub	r27, r27
    1854:	51 e1       	ldi	r21, 0x11	; 17
    1856:	07 c0       	rjmp	.+14     	; 0x1866 <__udivmodhi4_ep>

00001858 <__udivmodhi4_loop>:
    1858:	aa 1f       	adc	r26, r26
    185a:	bb 1f       	adc	r27, r27
    185c:	a6 17       	cp	r26, r22
    185e:	b7 07       	cpc	r27, r23
    1860:	10 f0       	brcs	.+4      	; 0x1866 <__udivmodhi4_ep>
    1862:	a6 1b       	sub	r26, r22
    1864:	b7 0b       	sbc	r27, r23

00001866 <__udivmodhi4_ep>:
    1866:	88 1f       	adc	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	5a 95       	dec	r21
    186c:	a9 f7       	brne	.-22     	; 0x1858 <__udivmodhi4_loop>
    186e:	80 95       	com	r24
    1870:	90 95       	com	r25
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	08 95       	ret

00001878 <__udivmodsi4>:
    1878:	a1 e2       	ldi	r26, 0x21	; 33
    187a:	1a 2e       	mov	r1, r26
    187c:	aa 1b       	sub	r26, r26
    187e:	bb 1b       	sub	r27, r27
    1880:	fd 01       	movw	r30, r26
    1882:	0d c0       	rjmp	.+26     	; 0x189e <__udivmodsi4_ep>

00001884 <__udivmodsi4_loop>:
    1884:	aa 1f       	adc	r26, r26
    1886:	bb 1f       	adc	r27, r27
    1888:	ee 1f       	adc	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	a2 17       	cp	r26, r18
    188e:	b3 07       	cpc	r27, r19
    1890:	e4 07       	cpc	r30, r20
    1892:	f5 07       	cpc	r31, r21
    1894:	20 f0       	brcs	.+8      	; 0x189e <__udivmodsi4_ep>
    1896:	a2 1b       	sub	r26, r18
    1898:	b3 0b       	sbc	r27, r19
    189a:	e4 0b       	sbc	r30, r20
    189c:	f5 0b       	sbc	r31, r21

0000189e <__udivmodsi4_ep>:
    189e:	66 1f       	adc	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	88 1f       	adc	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	1a 94       	dec	r1
    18a8:	69 f7       	brne	.-38     	; 0x1884 <__udivmodsi4_loop>
    18aa:	60 95       	com	r22
    18ac:	70 95       	com	r23
    18ae:	80 95       	com	r24
    18b0:	90 95       	com	r25
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	bd 01       	movw	r22, r26
    18b8:	cf 01       	movw	r24, r30
    18ba:	08 95       	ret

000018bc <__muluhisi3>:
    18bc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__umulhisi3>
    18c0:	a5 9f       	mul	r26, r21
    18c2:	90 0d       	add	r25, r0
    18c4:	b4 9f       	mul	r27, r20
    18c6:	90 0d       	add	r25, r0
    18c8:	a4 9f       	mul	r26, r20
    18ca:	80 0d       	add	r24, r0
    18cc:	91 1d       	adc	r25, r1
    18ce:	11 24       	eor	r1, r1
    18d0:	08 95       	ret

000018d2 <__umulhisi3>:
    18d2:	a2 9f       	mul	r26, r18
    18d4:	b0 01       	movw	r22, r0
    18d6:	b3 9f       	mul	r27, r19
    18d8:	c0 01       	movw	r24, r0
    18da:	a3 9f       	mul	r26, r19
    18dc:	70 0d       	add	r23, r0
    18de:	81 1d       	adc	r24, r1
    18e0:	11 24       	eor	r1, r1
    18e2:	91 1d       	adc	r25, r1
    18e4:	b2 9f       	mul	r27, r18
    18e6:	70 0d       	add	r23, r0
    18e8:	81 1d       	adc	r24, r1
    18ea:	11 24       	eor	r1, r1
    18ec:	91 1d       	adc	r25, r1
    18ee:	08 95       	ret

000018f0 <atol>:
    18f0:	1f 93       	push	r17
    18f2:	fc 01       	movw	r30, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	bc 01       	movw	r22, r24
    18fa:	e8 94       	clt
    18fc:	11 91       	ld	r17, Z+
    18fe:	10 32       	cpi	r17, 0x20	; 32
    1900:	e9 f3       	breq	.-6      	; 0x18fc <atol+0xc>
    1902:	19 30       	cpi	r17, 0x09	; 9
    1904:	10 f0       	brcs	.+4      	; 0x190a <atol+0x1a>
    1906:	1e 30       	cpi	r17, 0x0E	; 14
    1908:	c8 f3       	brcs	.-14     	; 0x18fc <atol+0xc>
    190a:	1b 32       	cpi	r17, 0x2B	; 43
    190c:	51 f0       	breq	.+20     	; 0x1922 <atol+0x32>
    190e:	1d 32       	cpi	r17, 0x2D	; 45
    1910:	49 f4       	brne	.+18     	; 0x1924 <atol+0x34>
    1912:	68 94       	set
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <atol+0x32>
    1916:	0e 94 9f 0c 	call	0x193e	; 0x193e <__mulsi_const_10>
    191a:	61 0f       	add	r22, r17
    191c:	71 1d       	adc	r23, r1
    191e:	81 1d       	adc	r24, r1
    1920:	91 1d       	adc	r25, r1
    1922:	11 91       	ld	r17, Z+
    1924:	10 53       	subi	r17, 0x30	; 48
    1926:	1a 30       	cpi	r17, 0x0A	; 10
    1928:	b0 f3       	brcs	.-20     	; 0x1916 <atol+0x26>
    192a:	3e f4       	brtc	.+14     	; 0x193a <atol+0x4a>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	1f 91       	pop	r17
    193c:	08 95       	ret

0000193e <__mulsi_const_10>:
    193e:	59 2f       	mov	r21, r25
    1940:	48 2f       	mov	r20, r24
    1942:	37 2f       	mov	r19, r23
    1944:	26 2f       	mov	r18, r22
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	66 0f       	add	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	62 0f       	add	r22, r18
    1958:	73 1f       	adc	r23, r19
    195a:	84 1f       	adc	r24, r20
    195c:	95 1f       	adc	r25, r21
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	08 95       	ret

00001968 <sprintf>:
    1968:	ae e0       	ldi	r26, 0x0E	; 14
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ea eb       	ldi	r30, 0xBA	; 186
    196e:	fc e0       	ldi	r31, 0x0C	; 12
    1970:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__prologue_saves__+0x1c>
    1974:	0d 89       	ldd	r16, Y+21	; 0x15
    1976:	1e 89       	ldd	r17, Y+22	; 0x16
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	8c 83       	std	Y+4, r24	; 0x04
    197c:	1a 83       	std	Y+2, r17	; 0x02
    197e:	09 83       	std	Y+1, r16	; 0x01
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f e7       	ldi	r25, 0x7F	; 127
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	ae 01       	movw	r20, r28
    198a:	47 5e       	subi	r20, 0xE7	; 231
    198c:	5f 4f       	sbci	r21, 0xFF	; 255
    198e:	6f 89       	ldd	r22, Y+23	; 0x17
    1990:	78 8d       	ldd	r23, Y+24	; 0x18
    1992:	ce 01       	movw	r24, r28
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <vfprintf>
    199a:	ef 81       	ldd	r30, Y+7	; 0x07
    199c:	f8 85       	ldd	r31, Y+8	; 0x08
    199e:	e0 0f       	add	r30, r16
    19a0:	f1 1f       	adc	r31, r17
    19a2:	10 82       	st	Z, r1
    19a4:	2e 96       	adiw	r28, 0x0e	; 14
    19a6:	e4 e0       	ldi	r30, 0x04	; 4
    19a8:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__epilogue_restores__+0x1c>

000019ac <vfprintf>:
    19ac:	ab e0       	ldi	r26, 0x0B	; 11
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ec ed       	ldi	r30, 0xDC	; 220
    19b2:	fc e0       	ldi	r31, 0x0C	; 12
    19b4:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__prologue_saves__>
    19b8:	6c 01       	movw	r12, r24
    19ba:	7b 01       	movw	r14, r22
    19bc:	8a 01       	movw	r16, r20
    19be:	fc 01       	movw	r30, r24
    19c0:	17 82       	std	Z+7, r1	; 0x07
    19c2:	16 82       	std	Z+6, r1	; 0x06
    19c4:	83 81       	ldd	r24, Z+3	; 0x03
    19c6:	81 ff       	sbrs	r24, 1
    19c8:	cc c1       	rjmp	.+920    	; 0x1d62 <vfprintf+0x3b6>
    19ca:	ce 01       	movw	r24, r28
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	3c 01       	movw	r6, r24
    19d0:	f6 01       	movw	r30, r12
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	f7 01       	movw	r30, r14
    19d6:	93 fd       	sbrc	r25, 3
    19d8:	85 91       	lpm	r24, Z+
    19da:	93 ff       	sbrs	r25, 3
    19dc:	81 91       	ld	r24, Z+
    19de:	7f 01       	movw	r14, r30
    19e0:	88 23       	and	r24, r24
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <vfprintf+0x3a>
    19e4:	ba c1       	rjmp	.+884    	; 0x1d5a <vfprintf+0x3ae>
    19e6:	85 32       	cpi	r24, 0x25	; 37
    19e8:	39 f4       	brne	.+14     	; 0x19f8 <vfprintf+0x4c>
    19ea:	93 fd       	sbrc	r25, 3
    19ec:	85 91       	lpm	r24, Z+
    19ee:	93 ff       	sbrs	r25, 3
    19f0:	81 91       	ld	r24, Z+
    19f2:	7f 01       	movw	r14, r30
    19f4:	85 32       	cpi	r24, 0x25	; 37
    19f6:	29 f4       	brne	.+10     	; 0x1a02 <vfprintf+0x56>
    19f8:	b6 01       	movw	r22, r12
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1a00:	e7 cf       	rjmp	.-50     	; 0x19d0 <vfprintf+0x24>
    1a02:	91 2c       	mov	r9, r1
    1a04:	21 2c       	mov	r2, r1
    1a06:	31 2c       	mov	r3, r1
    1a08:	ff e1       	ldi	r31, 0x1F	; 31
    1a0a:	f3 15       	cp	r31, r3
    1a0c:	d8 f0       	brcs	.+54     	; 0x1a44 <vfprintf+0x98>
    1a0e:	8b 32       	cpi	r24, 0x2B	; 43
    1a10:	79 f0       	breq	.+30     	; 0x1a30 <vfprintf+0x84>
    1a12:	38 f4       	brcc	.+14     	; 0x1a22 <vfprintf+0x76>
    1a14:	80 32       	cpi	r24, 0x20	; 32
    1a16:	79 f0       	breq	.+30     	; 0x1a36 <vfprintf+0x8a>
    1a18:	83 32       	cpi	r24, 0x23	; 35
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <vfprintf+0x98>
    1a1c:	23 2d       	mov	r18, r3
    1a1e:	20 61       	ori	r18, 0x10	; 16
    1a20:	1d c0       	rjmp	.+58     	; 0x1a5c <vfprintf+0xb0>
    1a22:	8d 32       	cpi	r24, 0x2D	; 45
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <vfprintf+0x92>
    1a26:	80 33       	cpi	r24, 0x30	; 48
    1a28:	69 f4       	brne	.+26     	; 0x1a44 <vfprintf+0x98>
    1a2a:	23 2d       	mov	r18, r3
    1a2c:	21 60       	ori	r18, 0x01	; 1
    1a2e:	16 c0       	rjmp	.+44     	; 0x1a5c <vfprintf+0xb0>
    1a30:	83 2d       	mov	r24, r3
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	38 2e       	mov	r3, r24
    1a36:	e3 2d       	mov	r30, r3
    1a38:	e4 60       	ori	r30, 0x04	; 4
    1a3a:	3e 2e       	mov	r3, r30
    1a3c:	2a c0       	rjmp	.+84     	; 0x1a92 <vfprintf+0xe6>
    1a3e:	f3 2d       	mov	r31, r3
    1a40:	f8 60       	ori	r31, 0x08	; 8
    1a42:	1d c0       	rjmp	.+58     	; 0x1a7e <vfprintf+0xd2>
    1a44:	37 fc       	sbrc	r3, 7
    1a46:	2d c0       	rjmp	.+90     	; 0x1aa2 <vfprintf+0xf6>
    1a48:	20 ed       	ldi	r18, 0xD0	; 208
    1a4a:	28 0f       	add	r18, r24
    1a4c:	2a 30       	cpi	r18, 0x0A	; 10
    1a4e:	40 f0       	brcs	.+16     	; 0x1a60 <vfprintf+0xb4>
    1a50:	8e 32       	cpi	r24, 0x2E	; 46
    1a52:	b9 f4       	brne	.+46     	; 0x1a82 <vfprintf+0xd6>
    1a54:	36 fc       	sbrc	r3, 6
    1a56:	81 c1       	rjmp	.+770    	; 0x1d5a <vfprintf+0x3ae>
    1a58:	23 2d       	mov	r18, r3
    1a5a:	20 64       	ori	r18, 0x40	; 64
    1a5c:	32 2e       	mov	r3, r18
    1a5e:	19 c0       	rjmp	.+50     	; 0x1a92 <vfprintf+0xe6>
    1a60:	36 fe       	sbrs	r3, 6
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0xc4>
    1a64:	8a e0       	ldi	r24, 0x0A	; 10
    1a66:	98 9e       	mul	r9, r24
    1a68:	20 0d       	add	r18, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	92 2e       	mov	r9, r18
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <vfprintf+0xe6>
    1a70:	ea e0       	ldi	r30, 0x0A	; 10
    1a72:	2e 9e       	mul	r2, r30
    1a74:	20 0d       	add	r18, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	22 2e       	mov	r2, r18
    1a7a:	f3 2d       	mov	r31, r3
    1a7c:	f0 62       	ori	r31, 0x20	; 32
    1a7e:	3f 2e       	mov	r3, r31
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <vfprintf+0xe6>
    1a82:	8c 36       	cpi	r24, 0x6C	; 108
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <vfprintf+0xe2>
    1a86:	83 2d       	mov	r24, r3
    1a88:	80 68       	ori	r24, 0x80	; 128
    1a8a:	38 2e       	mov	r3, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <vfprintf+0xe6>
    1a8e:	88 36       	cpi	r24, 0x68	; 104
    1a90:	41 f4       	brne	.+16     	; 0x1aa2 <vfprintf+0xf6>
    1a92:	f7 01       	movw	r30, r14
    1a94:	93 fd       	sbrc	r25, 3
    1a96:	85 91       	lpm	r24, Z+
    1a98:	93 ff       	sbrs	r25, 3
    1a9a:	81 91       	ld	r24, Z+
    1a9c:	7f 01       	movw	r14, r30
    1a9e:	81 11       	cpse	r24, r1
    1aa0:	b3 cf       	rjmp	.-154    	; 0x1a08 <vfprintf+0x5c>
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	9f 7d       	andi	r25, 0xDF	; 223
    1aa6:	95 54       	subi	r25, 0x45	; 69
    1aa8:	93 30       	cpi	r25, 0x03	; 3
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <vfprintf+0x10a>
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	9f e3       	ldi	r25, 0x3F	; 63
    1ab2:	99 83       	std	Y+1, r25	; 0x01
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <vfprintf+0x124>
    1ab6:	83 36       	cpi	r24, 0x63	; 99
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <vfprintf+0x11a>
    1aba:	83 37       	cpi	r24, 0x73	; 115
    1abc:	71 f0       	breq	.+28     	; 0x1ada <vfprintf+0x12e>
    1abe:	83 35       	cpi	r24, 0x53	; 83
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <vfprintf+0x118>
    1ac2:	59 c0       	rjmp	.+178    	; 0x1b76 <vfprintf+0x1ca>
    1ac4:	21 c0       	rjmp	.+66     	; 0x1b08 <vfprintf+0x15c>
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e 5f       	subi	r16, 0xFE	; 254
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	88 24       	eor	r8, r8
    1ad2:	83 94       	inc	r8
    1ad4:	91 2c       	mov	r9, r1
    1ad6:	53 01       	movw	r10, r6
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <vfprintf+0x154>
    1ada:	28 01       	movw	r4, r16
    1adc:	f2 e0       	ldi	r31, 0x02	; 2
    1ade:	4f 0e       	add	r4, r31
    1ae0:	51 1c       	adc	r5, r1
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	a0 80       	ld	r10, Z
    1ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae8:	36 fe       	sbrs	r3, 6
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <vfprintf+0x146>
    1aec:	69 2d       	mov	r22, r9
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfprintf+0x14a>
    1af2:	6f ef       	ldi	r22, 0xFF	; 255
    1af4:	7f ef       	ldi	r23, 0xFF	; 255
    1af6:	c5 01       	movw	r24, r10
    1af8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <strnlen>
    1afc:	4c 01       	movw	r8, r24
    1afe:	82 01       	movw	r16, r4
    1b00:	f3 2d       	mov	r31, r3
    1b02:	ff 77       	andi	r31, 0x7F	; 127
    1b04:	3f 2e       	mov	r3, r31
    1b06:	16 c0       	rjmp	.+44     	; 0x1b34 <vfprintf+0x188>
    1b08:	28 01       	movw	r4, r16
    1b0a:	22 e0       	ldi	r18, 0x02	; 2
    1b0c:	42 0e       	add	r4, r18
    1b0e:	51 1c       	adc	r5, r1
    1b10:	f8 01       	movw	r30, r16
    1b12:	a0 80       	ld	r10, Z
    1b14:	b1 80       	ldd	r11, Z+1	; 0x01
    1b16:	36 fe       	sbrs	r3, 6
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <vfprintf+0x174>
    1b1a:	69 2d       	mov	r22, r9
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <vfprintf+0x178>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	c5 01       	movw	r24, r10
    1b26:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <strnlen_P>
    1b2a:	4c 01       	movw	r8, r24
    1b2c:	f3 2d       	mov	r31, r3
    1b2e:	f0 68       	ori	r31, 0x80	; 128
    1b30:	3f 2e       	mov	r3, r31
    1b32:	82 01       	movw	r16, r4
    1b34:	33 fc       	sbrc	r3, 3
    1b36:	1b c0       	rjmp	.+54     	; 0x1b6e <vfprintf+0x1c2>
    1b38:	82 2d       	mov	r24, r2
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 16       	cp	r8, r24
    1b3e:	99 06       	cpc	r9, r25
    1b40:	b0 f4       	brcc	.+44     	; 0x1b6e <vfprintf+0x1c2>
    1b42:	b6 01       	movw	r22, r12
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1b4c:	2a 94       	dec	r2
    1b4e:	f4 cf       	rjmp	.-24     	; 0x1b38 <vfprintf+0x18c>
    1b50:	f5 01       	movw	r30, r10
    1b52:	37 fc       	sbrc	r3, 7
    1b54:	85 91       	lpm	r24, Z+
    1b56:	37 fe       	sbrs	r3, 7
    1b58:	81 91       	ld	r24, Z+
    1b5a:	5f 01       	movw	r10, r30
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1b64:	21 10       	cpse	r2, r1
    1b66:	2a 94       	dec	r2
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	82 1a       	sub	r8, r18
    1b6c:	91 08       	sbc	r9, r1
    1b6e:	81 14       	cp	r8, r1
    1b70:	91 04       	cpc	r9, r1
    1b72:	71 f7       	brne	.-36     	; 0x1b50 <vfprintf+0x1a4>
    1b74:	e8 c0       	rjmp	.+464    	; 0x1d46 <vfprintf+0x39a>
    1b76:	84 36       	cpi	r24, 0x64	; 100
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <vfprintf+0x1d2>
    1b7a:	89 36       	cpi	r24, 0x69	; 105
    1b7c:	41 f5       	brne	.+80     	; 0x1bce <vfprintf+0x222>
    1b7e:	f8 01       	movw	r30, r16
    1b80:	37 fe       	sbrs	r3, 7
    1b82:	07 c0       	rjmp	.+14     	; 0x1b92 <vfprintf+0x1e6>
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	0c 5f       	subi	r16, 0xFC	; 252
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <vfprintf+0x1f6>
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	07 2e       	mov	r0, r23
    1b98:	00 0c       	add	r0, r0
    1b9a:	88 0b       	sbc	r24, r24
    1b9c:	99 0b       	sbc	r25, r25
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	f3 2d       	mov	r31, r3
    1ba4:	ff 76       	andi	r31, 0x6F	; 111
    1ba6:	3f 2e       	mov	r3, r31
    1ba8:	97 ff       	sbrs	r25, 7
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <vfprintf+0x212>
    1bac:	90 95       	com	r25
    1bae:	80 95       	com	r24
    1bb0:	70 95       	com	r23
    1bb2:	61 95       	neg	r22
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	f0 68       	ori	r31, 0x80	; 128
    1bbc:	3f 2e       	mov	r3, r31
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	a3 01       	movw	r20, r6
    1bc4:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__ultoa_invert>
    1bc8:	88 2e       	mov	r8, r24
    1bca:	86 18       	sub	r8, r6
    1bcc:	45 c0       	rjmp	.+138    	; 0x1c58 <vfprintf+0x2ac>
    1bce:	85 37       	cpi	r24, 0x75	; 117
    1bd0:	31 f4       	brne	.+12     	; 0x1bde <vfprintf+0x232>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	2f 7e       	andi	r18, 0xEF	; 239
    1bd6:	b2 2e       	mov	r11, r18
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	25 c0       	rjmp	.+74     	; 0x1c28 <vfprintf+0x27c>
    1bde:	93 2d       	mov	r25, r3
    1be0:	99 7f       	andi	r25, 0xF9	; 249
    1be2:	b9 2e       	mov	r11, r25
    1be4:	8f 36       	cpi	r24, 0x6F	; 111
    1be6:	c1 f0       	breq	.+48     	; 0x1c18 <vfprintf+0x26c>
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <vfprintf+0x244>
    1bea:	88 35       	cpi	r24, 0x58	; 88
    1bec:	79 f0       	breq	.+30     	; 0x1c0c <vfprintf+0x260>
    1bee:	b5 c0       	rjmp	.+362    	; 0x1d5a <vfprintf+0x3ae>
    1bf0:	80 37       	cpi	r24, 0x70	; 112
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <vfprintf+0x24e>
    1bf4:	88 37       	cpi	r24, 0x78	; 120
    1bf6:	21 f0       	breq	.+8      	; 0x1c00 <vfprintf+0x254>
    1bf8:	b0 c0       	rjmp	.+352    	; 0x1d5a <vfprintf+0x3ae>
    1bfa:	e9 2f       	mov	r30, r25
    1bfc:	e0 61       	ori	r30, 0x10	; 16
    1bfe:	be 2e       	mov	r11, r30
    1c00:	b4 fe       	sbrs	r11, 4
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <vfprintf+0x272>
    1c04:	fb 2d       	mov	r31, r11
    1c06:	f4 60       	ori	r31, 0x04	; 4
    1c08:	bf 2e       	mov	r11, r31
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <vfprintf+0x272>
    1c0c:	34 fe       	sbrs	r3, 4
    1c0e:	0a c0       	rjmp	.+20     	; 0x1c24 <vfprintf+0x278>
    1c10:	29 2f       	mov	r18, r25
    1c12:	26 60       	ori	r18, 0x06	; 6
    1c14:	b2 2e       	mov	r11, r18
    1c16:	06 c0       	rjmp	.+12     	; 0x1c24 <vfprintf+0x278>
    1c18:	28 e0       	ldi	r18, 0x08	; 8
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <vfprintf+0x27c>
    1c1e:	20 e1       	ldi	r18, 0x10	; 16
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x27c>
    1c24:	20 e1       	ldi	r18, 0x10	; 16
    1c26:	32 e0       	ldi	r19, 0x02	; 2
    1c28:	f8 01       	movw	r30, r16
    1c2a:	b7 fe       	sbrs	r11, 7
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0x290>
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0c 5f       	subi	r16, 0xFC	; 252
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	06 c0       	rjmp	.+12     	; 0x1c48 <vfprintf+0x29c>
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 5f       	subi	r16, 0xFE	; 254
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	a3 01       	movw	r20, r6
    1c4a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__ultoa_invert>
    1c4e:	88 2e       	mov	r8, r24
    1c50:	86 18       	sub	r8, r6
    1c52:	fb 2d       	mov	r31, r11
    1c54:	ff 77       	andi	r31, 0x7F	; 127
    1c56:	3f 2e       	mov	r3, r31
    1c58:	36 fe       	sbrs	r3, 6
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <vfprintf+0x2ca>
    1c5c:	23 2d       	mov	r18, r3
    1c5e:	2e 7f       	andi	r18, 0xFE	; 254
    1c60:	a2 2e       	mov	r10, r18
    1c62:	89 14       	cp	r8, r9
    1c64:	58 f4       	brcc	.+22     	; 0x1c7c <vfprintf+0x2d0>
    1c66:	34 fe       	sbrs	r3, 4
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <vfprintf+0x2d4>
    1c6a:	32 fc       	sbrc	r3, 2
    1c6c:	09 c0       	rjmp	.+18     	; 0x1c80 <vfprintf+0x2d4>
    1c6e:	83 2d       	mov	r24, r3
    1c70:	8e 7e       	andi	r24, 0xEE	; 238
    1c72:	a8 2e       	mov	r10, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2d4>
    1c76:	b8 2c       	mov	r11, r8
    1c78:	a3 2c       	mov	r10, r3
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <vfprintf+0x2d6>
    1c7c:	b8 2c       	mov	r11, r8
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x2d6>
    1c80:	b9 2c       	mov	r11, r9
    1c82:	a4 fe       	sbrs	r10, 4
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <vfprintf+0x2f8>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 0d       	add	r30, r8
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 33       	cpi	r24, 0x30	; 48
    1c90:	21 f4       	brne	.+8      	; 0x1c9a <vfprintf+0x2ee>
    1c92:	9a 2d       	mov	r25, r10
    1c94:	99 7e       	andi	r25, 0xE9	; 233
    1c96:	a9 2e       	mov	r10, r25
    1c98:	09 c0       	rjmp	.+18     	; 0x1cac <vfprintf+0x300>
    1c9a:	a2 fe       	sbrs	r10, 2
    1c9c:	06 c0       	rjmp	.+12     	; 0x1caa <vfprintf+0x2fe>
    1c9e:	b3 94       	inc	r11
    1ca0:	b3 94       	inc	r11
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <vfprintf+0x300>
    1ca4:	8a 2d       	mov	r24, r10
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0x300>
    1caa:	b3 94       	inc	r11
    1cac:	a3 fc       	sbrc	r10, 3
    1cae:	11 c0       	rjmp	.+34     	; 0x1cd2 <vfprintf+0x326>
    1cb0:	a0 fe       	sbrs	r10, 0
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <vfprintf+0x314>
    1cb4:	b2 14       	cp	r11, r2
    1cb6:	88 f4       	brcc	.+34     	; 0x1cda <vfprintf+0x32e>
    1cb8:	28 0c       	add	r2, r8
    1cba:	92 2c       	mov	r9, r2
    1cbc:	9b 18       	sub	r9, r11
    1cbe:	0e c0       	rjmp	.+28     	; 0x1cdc <vfprintf+0x330>
    1cc0:	b2 14       	cp	r11, r2
    1cc2:	60 f4       	brcc	.+24     	; 0x1cdc <vfprintf+0x330>
    1cc4:	b6 01       	movw	r22, r12
    1cc6:	80 e2       	ldi	r24, 0x20	; 32
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1cce:	b3 94       	inc	r11
    1cd0:	f7 cf       	rjmp	.-18     	; 0x1cc0 <vfprintf+0x314>
    1cd2:	b2 14       	cp	r11, r2
    1cd4:	18 f4       	brcc	.+6      	; 0x1cdc <vfprintf+0x330>
    1cd6:	2b 18       	sub	r2, r11
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <vfprintf+0x332>
    1cda:	98 2c       	mov	r9, r8
    1cdc:	21 2c       	mov	r2, r1
    1cde:	a4 fe       	sbrs	r10, 4
    1ce0:	10 c0       	rjmp	.+32     	; 0x1d02 <vfprintf+0x356>
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	80 e3       	ldi	r24, 0x30	; 48
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1cec:	a2 fe       	sbrs	r10, 2
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <vfprintf+0x372>
    1cf0:	a1 fc       	sbrc	r10, 1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfprintf+0x34e>
    1cf4:	88 e7       	ldi	r24, 0x78	; 120
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <vfprintf+0x352>
    1cfa:	88 e5       	ldi	r24, 0x58	; 88
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0c c0       	rjmp	.+24     	; 0x1d1a <vfprintf+0x36e>
    1d02:	8a 2d       	mov	r24, r10
    1d04:	86 78       	andi	r24, 0x86	; 134
    1d06:	59 f0       	breq	.+22     	; 0x1d1e <vfprintf+0x372>
    1d08:	a1 fe       	sbrs	r10, 1
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x364>
    1d0c:	8b e2       	ldi	r24, 0x2B	; 43
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <vfprintf+0x366>
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	a7 fc       	sbrc	r10, 7
    1d14:	8d e2       	ldi	r24, 0x2D	; 45
    1d16:	b6 01       	movw	r22, r12
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1d1e:	89 14       	cp	r8, r9
    1d20:	38 f4       	brcc	.+14     	; 0x1d30 <vfprintf+0x384>
    1d22:	b6 01       	movw	r22, r12
    1d24:	80 e3       	ldi	r24, 0x30	; 48
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1d2c:	9a 94       	dec	r9
    1d2e:	f7 cf       	rjmp	.-18     	; 0x1d1e <vfprintf+0x372>
    1d30:	8a 94       	dec	r8
    1d32:	f3 01       	movw	r30, r6
    1d34:	e8 0d       	add	r30, r8
    1d36:	f1 1d       	adc	r31, r1
    1d38:	80 81       	ld	r24, Z
    1d3a:	b6 01       	movw	r22, r12
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1d42:	81 10       	cpse	r8, r1
    1d44:	f5 cf       	rjmp	.-22     	; 0x1d30 <vfprintf+0x384>
    1d46:	22 20       	and	r2, r2
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <vfprintf+0x3a0>
    1d4a:	42 ce       	rjmp	.-892    	; 0x19d0 <vfprintf+0x24>
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	80 e2       	ldi	r24, 0x20	; 32
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <fputc>
    1d56:	2a 94       	dec	r2
    1d58:	f6 cf       	rjmp	.-20     	; 0x1d46 <vfprintf+0x39a>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	86 81       	ldd	r24, Z+6	; 0x06
    1d5e:	97 81       	ldd	r25, Z+7	; 0x07
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <vfprintf+0x3ba>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	2b 96       	adiw	r28, 0x0b	; 11
    1d68:	e2 e1       	ldi	r30, 0x12	; 18
    1d6a:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__epilogue_restores__>

00001d6e <strnlen_P>:
    1d6e:	fc 01       	movw	r30, r24
    1d70:	05 90       	lpm	r0, Z+
    1d72:	61 50       	subi	r22, 0x01	; 1
    1d74:	70 40       	sbci	r23, 0x00	; 0
    1d76:	01 10       	cpse	r0, r1
    1d78:	d8 f7       	brcc	.-10     	; 0x1d70 <strnlen_P+0x2>
    1d7a:	80 95       	com	r24
    1d7c:	90 95       	com	r25
    1d7e:	8e 0f       	add	r24, r30
    1d80:	9f 1f       	adc	r25, r31
    1d82:	08 95       	ret

00001d84 <strnlen>:
    1d84:	fc 01       	movw	r30, r24
    1d86:	61 50       	subi	r22, 0x01	; 1
    1d88:	70 40       	sbci	r23, 0x00	; 0
    1d8a:	01 90       	ld	r0, Z+
    1d8c:	01 10       	cpse	r0, r1
    1d8e:	d8 f7       	brcc	.-10     	; 0x1d86 <strnlen+0x2>
    1d90:	80 95       	com	r24
    1d92:	90 95       	com	r25
    1d94:	8e 0f       	add	r24, r30
    1d96:	9f 1f       	adc	r25, r31
    1d98:	08 95       	ret

00001d9a <fputc>:
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	fb 01       	movw	r30, r22
    1da4:	23 81       	ldd	r18, Z+3	; 0x03
    1da6:	21 fd       	sbrc	r18, 1
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <fputc+0x16>
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	9f ef       	ldi	r25, 0xFF	; 255
    1dae:	2c c0       	rjmp	.+88     	; 0x1e08 <fputc+0x6e>
    1db0:	22 ff       	sbrs	r18, 2
    1db2:	16 c0       	rjmp	.+44     	; 0x1de0 <fputc+0x46>
    1db4:	46 81       	ldd	r20, Z+6	; 0x06
    1db6:	57 81       	ldd	r21, Z+7	; 0x07
    1db8:	24 81       	ldd	r18, Z+4	; 0x04
    1dba:	35 81       	ldd	r19, Z+5	; 0x05
    1dbc:	42 17       	cp	r20, r18
    1dbe:	53 07       	cpc	r21, r19
    1dc0:	44 f4       	brge	.+16     	; 0x1dd2 <fputc+0x38>
    1dc2:	a0 81       	ld	r26, Z
    1dc4:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc6:	9d 01       	movw	r18, r26
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	31 83       	std	Z+1, r19	; 0x01
    1dce:	20 83       	st	Z, r18
    1dd0:	8c 93       	st	X, r24
    1dd2:	26 81       	ldd	r18, Z+6	; 0x06
    1dd4:	37 81       	ldd	r19, Z+7	; 0x07
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	37 83       	std	Z+7, r19	; 0x07
    1ddc:	26 83       	std	Z+6, r18	; 0x06
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <fputc+0x6e>
    1de0:	8b 01       	movw	r16, r22
    1de2:	ec 01       	movw	r28, r24
    1de4:	fb 01       	movw	r30, r22
    1de6:	00 84       	ldd	r0, Z+8	; 0x08
    1de8:	f1 85       	ldd	r31, Z+9	; 0x09
    1dea:	e0 2d       	mov	r30, r0
    1dec:	09 95       	icall
    1dee:	89 2b       	or	r24, r25
    1df0:	e1 f6       	brne	.-72     	; 0x1daa <fputc+0x10>
    1df2:	d8 01       	movw	r26, r16
    1df4:	16 96       	adiw	r26, 0x06	; 6
    1df6:	8d 91       	ld	r24, X+
    1df8:	9c 91       	ld	r25, X
    1dfa:	17 97       	sbiw	r26, 0x07	; 7
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	17 96       	adiw	r26, 0x07	; 7
    1e00:	9c 93       	st	X, r25
    1e02:	8e 93       	st	-X, r24
    1e04:	16 97       	sbiw	r26, 0x06	; 6
    1e06:	ce 01       	movw	r24, r28
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <__ultoa_invert>:
    1e12:	fa 01       	movw	r30, r20
    1e14:	aa 27       	eor	r26, r26
    1e16:	28 30       	cpi	r18, 0x08	; 8
    1e18:	51 f1       	breq	.+84     	; 0x1e6e <__ultoa_invert+0x5c>
    1e1a:	20 31       	cpi	r18, 0x10	; 16
    1e1c:	81 f1       	breq	.+96     	; 0x1e7e <__ultoa_invert+0x6c>
    1e1e:	e8 94       	clt
    1e20:	6f 93       	push	r22
    1e22:	6e 7f       	andi	r22, 0xFE	; 254
    1e24:	6e 5f       	subi	r22, 0xFE	; 254
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2c:	af 4f       	sbci	r26, 0xFF	; 255
    1e2e:	b1 e0       	ldi	r27, 0x01	; 1
    1e30:	3e d0       	rcall	.+124    	; 0x1eae <__ultoa_invert+0x9c>
    1e32:	b4 e0       	ldi	r27, 0x04	; 4
    1e34:	3c d0       	rcall	.+120    	; 0x1eae <__ultoa_invert+0x9c>
    1e36:	67 0f       	add	r22, r23
    1e38:	78 1f       	adc	r23, r24
    1e3a:	89 1f       	adc	r24, r25
    1e3c:	9a 1f       	adc	r25, r26
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	68 0f       	add	r22, r24
    1e42:	79 1f       	adc	r23, r25
    1e44:	8a 1f       	adc	r24, r26
    1e46:	91 1d       	adc	r25, r1
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	6a 0f       	add	r22, r26
    1e4c:	71 1d       	adc	r23, r1
    1e4e:	81 1d       	adc	r24, r1
    1e50:	91 1d       	adc	r25, r1
    1e52:	a1 1d       	adc	r26, r1
    1e54:	20 d0       	rcall	.+64     	; 0x1e96 <__ultoa_invert+0x84>
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <__ultoa_invert+0x48>
    1e58:	68 94       	set
    1e5a:	3f 91       	pop	r19
    1e5c:	2a e0       	ldi	r18, 0x0A	; 10
    1e5e:	26 9f       	mul	r18, r22
    1e60:	11 24       	eor	r1, r1
    1e62:	30 19       	sub	r19, r0
    1e64:	30 5d       	subi	r19, 0xD0	; 208
    1e66:	31 93       	st	Z+, r19
    1e68:	de f6       	brtc	.-74     	; 0x1e20 <__ultoa_invert+0xe>
    1e6a:	cf 01       	movw	r24, r30
    1e6c:	08 95       	ret
    1e6e:	46 2f       	mov	r20, r22
    1e70:	47 70       	andi	r20, 0x07	; 7
    1e72:	40 5d       	subi	r20, 0xD0	; 208
    1e74:	41 93       	st	Z+, r20
    1e76:	b3 e0       	ldi	r27, 0x03	; 3
    1e78:	0f d0       	rcall	.+30     	; 0x1e98 <__ultoa_invert+0x86>
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__ultoa_invert+0x5c>
    1e7c:	f6 cf       	rjmp	.-20     	; 0x1e6a <__ultoa_invert+0x58>
    1e7e:	46 2f       	mov	r20, r22
    1e80:	4f 70       	andi	r20, 0x0F	; 15
    1e82:	40 5d       	subi	r20, 0xD0	; 208
    1e84:	4a 33       	cpi	r20, 0x3A	; 58
    1e86:	18 f0       	brcs	.+6      	; 0x1e8e <__ultoa_invert+0x7c>
    1e88:	49 5d       	subi	r20, 0xD9	; 217
    1e8a:	31 fd       	sbrc	r19, 1
    1e8c:	40 52       	subi	r20, 0x20	; 32
    1e8e:	41 93       	st	Z+, r20
    1e90:	02 d0       	rcall	.+4      	; 0x1e96 <__ultoa_invert+0x84>
    1e92:	a9 f7       	brne	.-22     	; 0x1e7e <__ultoa_invert+0x6c>
    1e94:	ea cf       	rjmp	.-44     	; 0x1e6a <__ultoa_invert+0x58>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	a6 95       	lsr	r26
    1e9a:	97 95       	ror	r25
    1e9c:	87 95       	ror	r24
    1e9e:	77 95       	ror	r23
    1ea0:	67 95       	ror	r22
    1ea2:	ba 95       	dec	r27
    1ea4:	c9 f7       	brne	.-14     	; 0x1e98 <__ultoa_invert+0x86>
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	61 05       	cpc	r22, r1
    1eaa:	71 05       	cpc	r23, r1
    1eac:	08 95       	ret
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	0a 2e       	mov	r0, r26
    1eb4:	06 94       	lsr	r0
    1eb6:	57 95       	ror	r21
    1eb8:	47 95       	ror	r20
    1eba:	37 95       	ror	r19
    1ebc:	27 95       	ror	r18
    1ebe:	ba 95       	dec	r27
    1ec0:	c9 f7       	brne	.-14     	; 0x1eb4 <__ultoa_invert+0xa2>
    1ec2:	62 0f       	add	r22, r18
    1ec4:	73 1f       	adc	r23, r19
    1ec6:	84 1f       	adc	r24, r20
    1ec8:	95 1f       	adc	r25, r21
    1eca:	a0 1d       	adc	r26, r0
    1ecc:	08 95       	ret

00001ece <__prologue_saves__>:
    1ece:	2f 92       	push	r2
    1ed0:	3f 92       	push	r3
    1ed2:	4f 92       	push	r4
    1ed4:	5f 92       	push	r5
    1ed6:	6f 92       	push	r6
    1ed8:	7f 92       	push	r7
    1eda:	8f 92       	push	r8
    1edc:	9f 92       	push	r9
    1ede:	af 92       	push	r10
    1ee0:	bf 92       	push	r11
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	ca 1b       	sub	r28, r26
    1ef8:	db 0b       	sbc	r29, r27
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	09 94       	ijmp

00001f06 <__epilogue_restores__>:
    1f06:	2a 88       	ldd	r2, Y+18	; 0x12
    1f08:	39 88       	ldd	r3, Y+17	; 0x11
    1f0a:	48 88       	ldd	r4, Y+16	; 0x10
    1f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f10:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f12:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f14:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f16:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f18:	b9 84       	ldd	r11, Y+9	; 0x09
    1f1a:	c8 84       	ldd	r12, Y+8	; 0x08
    1f1c:	df 80       	ldd	r13, Y+7	; 0x07
    1f1e:	ee 80       	ldd	r14, Y+6	; 0x06
    1f20:	fd 80       	ldd	r15, Y+5	; 0x05
    1f22:	0c 81       	ldd	r16, Y+4	; 0x04
    1f24:	1b 81       	ldd	r17, Y+3	; 0x03
    1f26:	aa 81       	ldd	r26, Y+2	; 0x02
    1f28:	b9 81       	ldd	r27, Y+1	; 0x01
    1f2a:	ce 0f       	add	r28, r30
    1f2c:	d1 1d       	adc	r29, r1
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	ed 01       	movw	r28, r26
    1f3a:	08 95       	ret

00001f3c <_exit>:
    1f3c:	f8 94       	cli

00001f3e <__stop_program>:
    1f3e:	ff cf       	rjmp	.-2      	; 0x1f3e <__stop_program>
